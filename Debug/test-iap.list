
test-iap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008b18  08008b18  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b18  08008b18  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039a0  20000180  08008c9c  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003b20  08008c9c  00023b20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001705b  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cb  00000000  00000000  00037200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  0003abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  0003bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a810  00000000  00000000  0003c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013952  00000000  00000000  00057168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008999b  00000000  00000000  0006aaba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4455  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  000f44a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a80 	.word	0x08008a80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	08008a80 	.word	0x08008a80

0800014c <FLASH_EEPROM_Write_BYTES>:
//    printf("at address:0x%x, read value:%d\r\n", addr, *(__IO uint32_t*)addr);
    HAL_FLASH_Lock();
}

void FLASH_EEPROM_Write_BYTES(uint32_t n,uint32_t address)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();     //解锁
 8000156:	f000 fe2d 	bl	8000db4 <HAL_FLASH_Unlock>
    uint32_t PageError = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	60fb      	str	r3, [r7, #12]
    static FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <FLASH_EEPROM_Write_BYTES+0x60>)
 8000160:	2200      	movs	r2, #0
 8000162:	601a      	str	r2, [r3, #0]
    EraseInitStruct.PageAddress=address;
 8000164:	4a11      	ldr	r2, [pc, #68]	; (80001ac <FLASH_EEPROM_Write_BYTES+0x60>)
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	6093      	str	r3, [r2, #8]
    EraseInitStruct.NbPages = 1;
 800016a:	4b10      	ldr	r3, [pc, #64]	; (80001ac <FLASH_EEPROM_Write_BYTES+0x60>)
 800016c:	2201      	movs	r2, #1
 800016e:	60da      	str	r2, [r3, #12]
    if(address%1024==0)
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <FLASH_EEPROM_Write_BYTES+0x3a>
    {
    if (HAL_FLASHEx_Erase(&EraseInitStruct,&PageError) == HAL_OK) //如果结构体中的起始地�??????????0x0801FC00，这�??????????页的数据擦除成功，返回OK
 800017a:	f107 030c 	add.w	r3, r7, #12
 800017e:	4619      	mov	r1, r3
 8000180:	480a      	ldr	r0, [pc, #40]	; (80001ac <FLASH_EEPROM_Write_BYTES+0x60>)
 8000182:	f000 feff 	bl	8000f84 <HAL_FLASHEx_Erase>
    {
//        printf("擦除 成功\r\n");
    }
    }
    uint32_t writeFlashData = n;        //代写入的�??????????
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	617b      	str	r3, [r7, #20]
    uint32_t addr = address;                  //写入的地�??????????
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	613b      	str	r3, [r7, #16]
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,addr, writeFlashData); //向FLASH中写�??????????
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	461a      	mov	r2, r3
 8000192:	f04f 0300 	mov.w	r3, #0
 8000196:	6939      	ldr	r1, [r7, #16]
 8000198:	2002      	movs	r0, #2
 800019a:	f000 fd9b 	bl	8000cd4 <HAL_FLASH_Program>
//    printf("at address:0x%x, read value:%d\r\n", addr, *(__IO uint32_t*)addr);
    HAL_FLASH_Lock();
 800019e:	f000 fe2f 	bl	8000e00 <HAL_FLASH_Lock>
}
 80001a2:	bf00      	nop
 80001a4:	3718      	adds	r7, #24
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200001a4 	.word	0x200001a4

080001b0 <iap_load_app>:
}



void iap_load_app(uint32_t appxaddr)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(((*(vu32*)(appxaddr+4))&0xFF000000)==0x08000000)//判断是否�???????????????0X08XXXXXX.
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80001c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80001c6:	d108      	bne.n	80001da <iap_load_app+0x2a>
	{
		jump2app=(iapfun)*(vu32*)(appxaddr+4);		//用户代码区第二个字为程序�???????????????始地�???????????????(复位地址)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	3304      	adds	r3, #4
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <iap_load_app+0x34>)
 80001d2:	601a      	str	r2, [r3, #0]
//		MSR_MSP(*(vu32*)appxaddr);					//初始化APP堆栈指针(用户代码区的第一个字用于存放栈顶地址)

		jump2app();									//跳转到APP.
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <iap_load_app+0x34>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4798      	blx	r3
	}
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200003d8 	.word	0x200003d8

080001e8 <HAL_UART_RxCpltCallback>:
uint8_t rDataFlag = 0;
uint8_t updateFlag = 0;
extern USBD_HandleTypeDef hUsbDeviceFS;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  aRxnumbuf[aRxnum]=aRxBuffer[3];
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 80001f2:	78da      	ldrb	r2, [r3, #3]
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4611      	mov	r1, r2
 80001fa:	4a27      	ldr	r2, [pc, #156]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+aRxBuffer[2];
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 8000206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020a:	021a      	lsls	r2, r3, #8
 800020c:	4b20      	ldr	r3, [pc, #128]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 800020e:	789b      	ldrb	r3, [r3, #2]
 8000210:	4619      	mov	r1, r3
 8000212:	4b20      	ldr	r3, [pc, #128]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	440a      	add	r2, r1
 8000218:	491f      	ldr	r1, [pc, #124]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+aRxBuffer[1];
 800021e:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 8000224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000228:	021a      	lsls	r2, r3, #8
 800022a:	4b19      	ldr	r3, [pc, #100]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	4619      	mov	r1, r3
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	440a      	add	r2, r1
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+aRxBuffer[0];
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a15      	ldr	r2, [pc, #84]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	021a      	lsls	r2, r3, #8
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4619      	mov	r1, r3
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	440a      	add	r2, r1
 8000254:	4910      	ldr	r1, [pc, #64]	; (8000298 <HAL_UART_RxCpltCallback+0xb0>)
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//  if(aRxBuffer[0]!=0x00){
	  aRxnum++;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	3301      	adds	r3, #1
 8000260:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <HAL_UART_RxCpltCallback+0xac>)
 8000262:	6013      	str	r3, [r2, #0]
    if(aRxBuffer[0]==0x7E){  // (ascii)0x7E = "~"
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b7e      	cmp	r3, #126	; 0x7e
 800026a:	d102      	bne.n	8000272 <HAL_UART_RxCpltCallback+0x8a>
      rDataFlag = 1;
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <HAL_UART_RxCpltCallback+0xb4>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
    }
 // }
  while(HAL_UART_Receive_IT(&huart1, aRxBuffer, 4) != HAL_OK); // Wait completly receive 1 byte data, and put data in rDataBuffer
 8000272:	bf00      	nop
 8000274:	2204      	movs	r2, #4
 8000276:	4906      	ldr	r1, [pc, #24]	; (8000290 <HAL_UART_RxCpltCallback+0xa8>)
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <HAL_UART_RxCpltCallback+0xb8>)
 800027a:	f003 fc51 	bl	8003b20 <HAL_UART_Receive_IT>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f7      	bne.n	8000274 <HAL_UART_RxCpltCallback+0x8c>
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000c34 	.word	0x20000c34
 8000294:	2000019c 	.word	0x2000019c
 8000298:	20000c38 	.word	0x20000c38
 800029c:	200001a0 	.word	0x200001a0
 80002a0:	200003dc 	.word	0x200003dc

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b087      	sub	sp, #28
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint8_t aTxBuffer[]="flash update";
 80002aa:	4b29      	ldr	r3, [pc, #164]	; (8000350 <main+0xac>)
 80002ac:	463c      	mov	r4, r7
 80002ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b0:	c407      	stmia	r4!, {r0, r1, r2}
 80002b2:	7023      	strb	r3, [r4, #0]
    uint32_t preTicks;


    uint32_t flash_address=0x0800B000;
 80002b4:	4b27      	ldr	r3, [pc, #156]	; (8000354 <main+0xb0>)
 80002b6:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b8:	f000 fa96 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002bc:	f000 f85a 	bl	8000374 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c0:	f000 f8e2 	bl	8000488 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002c4:	f000 f8b6 	bl	8000434 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80002c8:	f007 fe82 	bl	8007fd0 <MX_USB_DEVICE_Init>
//  MX_RTC_Init();
  /* USER CODE BEGIN 2 */
//  HAL_Delay(5000);
  HAL_UART_Receive_IT(&huart1,(uint8_t*)aRxBuffer,4);
 80002cc:	2204      	movs	r2, #4
 80002ce:	4922      	ldr	r1, [pc, #136]	; (8000358 <main+0xb4>)
 80002d0:	4822      	ldr	r0, [pc, #136]	; (800035c <main+0xb8>)
 80002d2:	f003 fc25 	bl	8003b20 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */

// 	  if(KEY_PIN==0)
// 	  {
 		  if(rDataFlag==1)
 80002d6:	4b22      	ldr	r3, [pc, #136]	; (8000360 <main+0xbc>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d127      	bne.n	800032e <main+0x8a>
 		  {
 			  HAL_UART_Transmit(&huart1,aRxnumbuf,aRxnum,0xffff);
 80002de:	4b21      	ldr	r3, [pc, #132]	; (8000364 <main+0xc0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e8:	491f      	ldr	r1, [pc, #124]	; (8000368 <main+0xc4>)
 80002ea:	481c      	ldr	r0, [pc, #112]	; (800035c <main+0xb8>)
 80002ec:	f003 fb86 	bl	80039fc <HAL_UART_Transmit>
 			  for(int i=0;i<aRxnum;i++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	e00d      	b.n	8000312 <main+0x6e>
 			  {
 		      FLASH_EEPROM_Write_BYTES(aRxnumbuf[i],flash_address);
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <main+0xc4>)
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fe:	6979      	ldr	r1, [r7, #20]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff23 	bl	800014c <FLASH_EEPROM_Write_BYTES>
 		     flash_address=flash_address+4;
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3304      	adds	r3, #4
 800030a:	617b      	str	r3, [r7, #20]
 			  for(int i=0;i<aRxnum;i++)
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	3301      	adds	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <main+0xc0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	d3ec      	bcc.n	80002f6 <main+0x52>
 			  }
 			 aRxnum=0;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <main+0xc0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 			 rDataFlag=0;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <main+0xbc>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
 			updateFlag=1;
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <main+0xc8>)
 800032a:	2201      	movs	r2, #1
 800032c:	701a      	strb	r2, [r3, #0]
 		  }
 	 	  if(updateFlag==1)
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <main+0xc8>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d1cf      	bne.n	80002d6 <main+0x32>
 	 	  {
 	 		HAL_RCC_DeInit();
 8000336:	f002 fd77 	bl	8002e28 <HAL_RCC_DeInit>
// 	 		HAL_UART_MspDeInit(&huart1);
 	 		USBD_DeInit(&hUsbDeviceFS);
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0xcc>)
 800033c:	f006 fdbb 	bl	8006eb6 <USBD_DeInit>
 	 		updateFlag=0;
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <main+0xc8>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
 	 		iap_load_app(FLASH_APP_ADDR);
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <main+0xb0>)
 8000348:	f7ff ff32 	bl	80001b0 <iap_load_app>
 		  if(rDataFlag==1)
 800034c:	e7c3      	b.n	80002d6 <main+0x32>
 800034e:	bf00      	nop
 8000350:	08008a98 	.word	0x08008a98
 8000354:	0800b000 	.word	0x0800b000
 8000358:	20000c34 	.word	0x20000c34
 800035c:	200003dc 	.word	0x200003dc
 8000360:	200001a0 	.word	0x200001a0
 8000364:	2000019c 	.word	0x2000019c
 8000368:	20000c38 	.word	0x20000c38
 800036c:	200001a1 	.word	0x200001a1
 8000370:	20002ba0 	.word	0x20002ba0

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b094      	sub	sp, #80	; 0x50
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f008 fb74 	bl	8008a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003a4:	2309      	movs	r3, #9
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ba:	2302      	movs	r3, #2
 80003bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	4618      	mov	r0, r3
 80003d0:	f002 fdc4 	bl	8002f5c <HAL_RCC_OscConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003da:	f000 f907 	bl	80005ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003de:	230f      	movs	r3, #15
 80003e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2101      	movs	r1, #1
 80003fa:	4618      	mov	r0, r3
 80003fc:	f003 f82e 	bl	800345c <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000406:	f000 f8f1 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800040a:	2311      	movs	r3, #17
 800040c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800040e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000412:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000414:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000418:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4618      	mov	r0, r3
 800041e:	f003 f9b7 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000428:	f000 f8e0 	bl	80005ec <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3750      	adds	r7, #80	; 0x50
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_USART1_UART_Init+0x50>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <MX_USART1_UART_Init+0x4c>)
 800046c:	f003 fa79 	bl	8003962 <HAL_UART_Init>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000476:	f000 f8b9 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200003dc 	.word	0x200003dc
 8000484:	40013800 	.word	0x40013800

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	4b4f      	ldr	r3, [pc, #316]	; (80005dc <MX_GPIO_Init+0x154>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a4e      	ldr	r2, [pc, #312]	; (80005dc <MX_GPIO_Init+0x154>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b4c      	ldr	r3, [pc, #304]	; (80005dc <MX_GPIO_Init+0x154>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0310 	and.w	r3, r3, #16
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	4b49      	ldr	r3, [pc, #292]	; (80005dc <MX_GPIO_Init+0x154>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a48      	ldr	r2, [pc, #288]	; (80005dc <MX_GPIO_Init+0x154>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b46      	ldr	r3, [pc, #280]	; (80005dc <MX_GPIO_Init+0x154>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b43      	ldr	r3, [pc, #268]	; (80005dc <MX_GPIO_Init+0x154>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a42      	ldr	r2, [pc, #264]	; (80005dc <MX_GPIO_Init+0x154>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b40      	ldr	r3, [pc, #256]	; (80005dc <MX_GPIO_Init+0x154>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b3d      	ldr	r3, [pc, #244]	; (80005dc <MX_GPIO_Init+0x154>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a3c      	ldr	r2, [pc, #240]	; (80005dc <MX_GPIO_Init+0x154>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b3a      	ldr	r3, [pc, #232]	; (80005dc <MX_GPIO_Init+0x154>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4837      	ldr	r0, [pc, #220]	; (80005e0 <MX_GPIO_Init+0x158>)
 8000504:	f000 ff6a 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	4835      	ldr	r0, [pc, #212]	; (80005e4 <MX_GPIO_Init+0x15c>)
 800050e:	f000 ff65 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	482d      	ldr	r0, [pc, #180]	; (80005e0 <MX_GPIO_Init+0x158>)
 800052c:	f000 fdd2 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4829      	ldr	r0, [pc, #164]	; (80005e8 <MX_GPIO_Init+0x160>)
 8000544:	f000 fdc6 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4821      	ldr	r0, [pc, #132]	; (80005e4 <MX_GPIO_Init+0x15c>)
 8000560:	f000 fdb8 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000564:	2320      	movs	r3, #32
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056c:	2301      	movs	r3, #1
 800056e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	4619      	mov	r1, r3
 8000576:	481b      	ldr	r0, [pc, #108]	; (80005e4 <MX_GPIO_Init+0x15c>)
 8000578:	f000 fdac 	bl	80010d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2101      	movs	r1, #1
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <MX_GPIO_Init+0x15c>)
 8000582:	f000 ff2b 	bl	80013dc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_GPIO_Init+0x160>)
 800058e:	f000 ff25 	bl	80013dc <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <MX_GPIO_Init+0x160>)
 80005ac:	f000 fd92 	bl	80010d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0x160>)
 80005b8:	f000 ff10 	bl	80013dc <HAL_GPIO_WritePin>
  HAL_Delay(65);
 80005bc:	2041      	movs	r0, #65	; 0x41
 80005be:	f000 f975 	bl	80008ac <HAL_Delay>
  //先把PA12拉低再拉高，利用D+模拟USB的拔插动作
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <MX_GPIO_Init+0x160>)
 80005ca:	f000 ff07 	bl	80013dc <HAL_GPIO_WritePin>
  HAL_Delay(65);
 80005ce:	2041      	movs	r0, #65	; 0x41
 80005d0:	f000 f96c 	bl	80008ac <HAL_Delay>

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40011000 	.word	0x40011000
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	40010800 	.word	0x40010800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <HAL_UART_MspInit+0x9c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d139      	bne.n	80006f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1e      	ldr	r2, [pc, #120]	; (80006fc <HAL_UART_MspInit+0xa0>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_UART_MspInit+0xa0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a18      	ldr	r2, [pc, #96]	; (80006fc <HAL_UART_MspInit+0xa0>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_UART_MspInit+0xa0>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	4619      	mov	r1, r3
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <HAL_UART_MspInit+0xa4>)
 80006c2:	f000 fd07 	bl	80010d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <HAL_UART_MspInit+0xa4>)
 80006dc:	f000 fcfa 	bl	80010d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2025      	movs	r0, #37	; 0x25
 80006e6:	f000 fa00 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006ea:	2025      	movs	r0, #37	; 0x25
 80006ec:	f000 fa19 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010800 	.word	0x40010800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074a:	f000 f893 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000758:	4802      	ldr	r0, [pc, #8]	; (8000764 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800075a:	f000 ffd1 	bl	8001700 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20003834 	.word	0x20003834

08000768 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <USART1_IRQHandler+0x10>)
 800076e:	f003 fa07 	bl	8003b80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200003dc 	.word	0x200003dc

0800077c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <RTC_Alarm_IRQHandler+0x10>)
 8000782:	f003 f8bb 	bl	80038fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000420 	.word	0x20000420

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800079e:	490d      	ldr	r1, [pc, #52]	; (80007d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a0:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b4:	4c0a      	ldr	r4, [pc, #40]	; (80007e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c2:	f7ff ffe5 	bl	8000790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c6:	f008 f92f 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd6b 	bl	80002a4 <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007d8:	08008b20 	.word	0x08008b20
  ldr r2, =_sbss
 80007dc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80007e0:	20003b20 	.word	0x20003b20

080007e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_2_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f96b 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fef8 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f991 	bl	8000b5a <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 f94b 	bl	8000aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000004 	.word	0x20000004

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000008 	.word	0x20000008
 8000894:	20002b78 	.word	0x20002b78

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20002b78 	.word	0x20002b78

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b4:	f7ff fff0 	bl	8000898 <HAL_GetTick>
 80008b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c4:	d005      	beq.n	80008d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_Delay+0x44>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d2:	bf00      	nop
 80008d4:	f7ff ffe0 	bl	8000898 <HAL_GetTick>
 80008d8:	4602      	mov	r2, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d8f7      	bhi.n	80008d4 <HAL_Delay+0x28>
  {
  }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800091c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	60d3      	str	r3, [r2, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <__NVIC_EnableIRQ+0x34>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100

08000990 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db12      	blt.n	80009c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	490a      	ldr	r1, [pc, #40]	; (80009d4 <__NVIC_DisableIRQ+0x44>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	3320      	adds	r3, #32
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009bc:	f3bf 8f4f 	dsb	sy
}
 80009c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c2:	f3bf 8f6f 	isb	sy
}
 80009c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff90 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff09 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000afc:	f7ff ff1e 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	6978      	ldr	r0, [r7, #20]
 8000b08:	f7ff ff90 	bl	8000a2c <NVIC_EncodePriority>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff5f 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff11 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff1f 	bl	8000990 <__NVIC_DisableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff94 	bl	8000a90 <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d008      	beq.n	8000b9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e020      	b.n	8000bdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 020e 	bic.w	r2, r2, #14
 8000ba8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0201 	bic.w	r2, r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
	...

08000be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d005      	beq.n	8000c0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e051      	b.n	8000cae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 020e 	bic.w	r2, r2, #14
 8000c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0201 	bic.w	r2, r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <HAL_DMA_Abort_IT+0xd0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d029      	beq.n	8000c88 <HAL_DMA_Abort_IT+0xa0>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <HAL_DMA_Abort_IT+0xd4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d022      	beq.n	8000c84 <HAL_DMA_Abort_IT+0x9c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <HAL_DMA_Abort_IT+0xd8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d01a      	beq.n	8000c7e <HAL_DMA_Abort_IT+0x96>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <HAL_DMA_Abort_IT+0xdc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d012      	beq.n	8000c78 <HAL_DMA_Abort_IT+0x90>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_DMA_Abort_IT+0xe0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d00a      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x8a>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_DMA_Abort_IT+0xe4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d102      	bne.n	8000c6c <HAL_DMA_Abort_IT+0x84>
 8000c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c6a:	e00e      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c70:	e00b      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c76:	e008      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	e005      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c82:	e002      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c84:	2310      	movs	r3, #16
 8000c86:	e000      	b.n	8000c8a <HAL_DMA_Abort_IT+0xa2>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	4a11      	ldr	r2, [pc, #68]	; (8000cd0 <HAL_DMA_Abort_IT+0xe8>)
 8000c8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	4798      	blx	r3
    } 
  }
  return status;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40020008 	.word	0x40020008
 8000cbc:	4002001c 	.word	0x4002001c
 8000cc0:	40020030 	.word	0x40020030
 8000cc4:	40020044 	.word	0x40020044
 8000cc8:	40020058 	.word	0x40020058
 8000ccc:	4002006c 	.word	0x4002006c
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_FLASH_Program+0xd8>)
 8000cf0:	7e1b      	ldrb	r3, [r3, #24]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_FLASH_Program+0x26>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e054      	b.n	8000da4 <HAL_FLASH_Program+0xd0>
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_FLASH_Program+0xd8>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d04:	f000 f8a8 	bl	8000e58 <FLASH_WaitForLastOperation>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d144      	bne.n	8000d9c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d102      	bne.n	8000d1e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	757b      	strb	r3, [r7, #21]
 8000d1c:	e007      	b.n	8000d2e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d102      	bne.n	8000d2a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d24:	2302      	movs	r3, #2
 8000d26:	757b      	strb	r3, [r7, #21]
 8000d28:	e001      	b.n	8000d2e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75bb      	strb	r3, [r7, #22]
 8000d32:	e02d      	b.n	8000d90 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	005a      	lsls	r2, r3, #1
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	eb02 0c03 	add.w	ip, r2, r3
 8000d3e:	7dbb      	ldrb	r3, [r7, #22]
 8000d40:	0119      	lsls	r1, r3, #4
 8000d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d46:	f1c1 0620 	rsb	r6, r1, #32
 8000d4a:	f1a1 0020 	sub.w	r0, r1, #32
 8000d4e:	fa22 f401 	lsr.w	r4, r2, r1
 8000d52:	fa03 f606 	lsl.w	r6, r3, r6
 8000d56:	4334      	orrs	r4, r6
 8000d58:	fa23 f000 	lsr.w	r0, r3, r0
 8000d5c:	4304      	orrs	r4, r0
 8000d5e:	fa23 f501 	lsr.w	r5, r3, r1
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4660      	mov	r0, ip
 8000d68:	f000 f85a 	bl	8000e20 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d70:	f000 f872 	bl	8000e58 <FLASH_WaitForLastOperation>
 8000d74:	4603      	mov	r3, r0
 8000d76:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_FLASH_Program+0xdc>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_FLASH_Program+0xdc>)
 8000d7e:	f023 0301 	bic.w	r3, r3, #1
 8000d82:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d107      	bne.n	8000d9a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000d8a:	7dbb      	ldrb	r3, [r7, #22]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	75bb      	strb	r3, [r7, #22]
 8000d90:	7dba      	ldrb	r2, [r7, #22]
 8000d92:	7d7b      	ldrb	r3, [r7, #21]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d3cd      	bcc.n	8000d34 <HAL_FLASH_Program+0x60>
 8000d98:	e000      	b.n	8000d9c <HAL_FLASH_Program+0xc8>
      {
        break;
 8000d9a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_FLASH_Program+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	761a      	strb	r2, [r3, #24]

  return status;
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dac:	20002b80 	.word	0x20002b80
 8000db0:	40022000 	.word	0x40022000

08000db4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_FLASH_Unlock+0x40>)
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00d      	beq.n	8000de6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_FLASH_Unlock+0x40>)
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_FLASH_Unlock+0x44>)
 8000dce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_FLASH_Unlock+0x40>)
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_FLASH_Unlock+0x48>)
 8000dd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_FLASH_Unlock+0x40>)
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000de6:	79fb      	ldrb	r3, [r7, #7]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000
 8000df8:	45670123 	.word	0x45670123
 8000dfc:	cdef89ab 	.word	0xcdef89ab

08000e00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_FLASH_Lock+0x1c>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_FLASH_Lock+0x1c>)
 8000e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <FLASH_Program_HalfWord+0x30>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <FLASH_Program_HalfWord+0x34>)
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <FLASH_Program_HalfWord+0x34>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	887a      	ldrh	r2, [r7, #2]
 8000e42:	801a      	strh	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20002b80 	.word	0x20002b80
 8000e54:	40022000 	.word	0x40022000

08000e58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff fd1a 	bl	8000898 <HAL_GetTick>
 8000e64:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e66:	e010      	b.n	8000e8a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6e:	d00c      	beq.n	8000e8a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <FLASH_WaitForLastOperation+0x2e>
 8000e76:	f7ff fd0f 	bl	8000898 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d201      	bcs.n	8000e8a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e025      	b.n	8000ed6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1e8      	bne.n	8000e68 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000ea4:	2220      	movs	r2, #32
 8000ea6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10b      	bne.n	8000ecc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <FLASH_WaitForLastOperation+0x88>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000ecc:	f000 f80a 	bl	8000ee4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d009      	beq.n	8000f0e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000f04:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d009      	beq.n	8000f2e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000f24:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00b      	beq.n	8000f52 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <FLASH_SetErrorCode+0x9c>)
 8000f44:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f240 1201 	movw	r2, #257	; 0x101
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <FLASH_SetErrorCode+0x86>
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	61d3      	str	r3, [r2, #28]
}  
 8000f68:	e002      	b.n	8000f70 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <FLASH_SetErrorCode+0x98>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60d3      	str	r3, [r2, #12]
}  
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	20002b80 	.word	0x20002b80

08000f84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_FLASHEx_Erase+0xd0>)
 8000f98:	7e1b      	ldrb	r3, [r3, #24]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_FLASHEx_Erase+0x1e>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e053      	b.n	800104a <HAL_FLASHEx_Erase+0xc6>
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <HAL_FLASHEx_Erase+0xd0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d116      	bne.n	8000fde <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000fb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb4:	f7ff ff50 	bl	8000e58 <FLASH_WaitForLastOperation>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d141      	bne.n	8001042 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f84c 	bl	800105c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc8:	f7ff ff46 	bl	8000e58 <FLASH_WaitForLastOperation>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <HAL_FLASHEx_Erase+0xd4>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a20      	ldr	r2, [pc, #128]	; (8001058 <HAL_FLASHEx_Erase+0xd4>)
 8000fd6:	f023 0304 	bic.w	r3, r3, #4
 8000fda:	6113      	str	r3, [r2, #16]
 8000fdc:	e031      	b.n	8001042 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000fde:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe2:	f7ff ff39 	bl	8000e58 <FLASH_WaitForLastOperation>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d12a      	bne.n	8001042 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e019      	b.n	8001030 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f000 f849 	bl	8001094 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001002:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001006:	f7ff ff27 	bl	8000e58 <FLASH_WaitForLastOperation>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_FLASHEx_Erase+0xd4>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_FLASHEx_Erase+0xd4>)
 8001014:	f023 0302 	bic.w	r3, r3, #2
 8001018:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	601a      	str	r2, [r3, #0]
            break;
 8001026:	e00c      	b.n	8001042 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800102e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	029a      	lsls	r2, r3, #10
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3dc      	bcc.n	8000ffc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_FLASHEx_Erase+0xd0>)
 8001044:	2200      	movs	r2, #0
 8001046:	761a      	strb	r2, [r3, #24]

  return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20002b80 	.word	0x20002b80
 8001058:	40022000 	.word	0x40022000

0800105c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <FLASH_MassErase+0x30>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <FLASH_MassErase+0x34>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <FLASH_MassErase+0x34>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <FLASH_MassErase+0x34>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <FLASH_MassErase+0x34>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20002b80 	.word	0x20002b80
 8001090:	40022000 	.word	0x40022000

08001094 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FLASH_PageErase+0x38>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <FLASH_PageErase+0x3c>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <FLASH_PageErase+0x3c>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <FLASH_PageErase+0x3c>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <FLASH_PageErase+0x3c>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <FLASH_PageErase+0x3c>)
 80010ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010be:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20002b80 	.word	0x20002b80
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e169      	b.n	80013bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e8:	2201      	movs	r2, #1
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8158 	bne.w	80013b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a9a      	ldr	r2, [pc, #616]	; (8001374 <HAL_GPIO_Init+0x2a0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d05e      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001110:	4a98      	ldr	r2, [pc, #608]	; (8001374 <HAL_GPIO_Init+0x2a0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d875      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001116:	4a98      	ldr	r2, [pc, #608]	; (8001378 <HAL_GPIO_Init+0x2a4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d058      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 800111c:	4a96      	ldr	r2, [pc, #600]	; (8001378 <HAL_GPIO_Init+0x2a4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d86f      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001122:	4a96      	ldr	r2, [pc, #600]	; (800137c <HAL_GPIO_Init+0x2a8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d052      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001128:	4a94      	ldr	r2, [pc, #592]	; (800137c <HAL_GPIO_Init+0x2a8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d869      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800112e:	4a94      	ldr	r2, [pc, #592]	; (8001380 <HAL_GPIO_Init+0x2ac>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d04c      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001134:	4a92      	ldr	r2, [pc, #584]	; (8001380 <HAL_GPIO_Init+0x2ac>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d863      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800113a:	4a92      	ldr	r2, [pc, #584]	; (8001384 <HAL_GPIO_Init+0x2b0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d046      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001140:	4a90      	ldr	r2, [pc, #576]	; (8001384 <HAL_GPIO_Init+0x2b0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d85d      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d82a      	bhi.n	80011a0 <HAL_GPIO_Init+0xcc>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d859      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <HAL_GPIO_Init+0x80>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011bb 	.word	0x080011bb
 8001160:	080011fd 	.word	0x080011fd
 8001164:	08001203 	.word	0x08001203
 8001168:	08001203 	.word	0x08001203
 800116c:	08001203 	.word	0x08001203
 8001170:	08001203 	.word	0x08001203
 8001174:	08001203 	.word	0x08001203
 8001178:	08001203 	.word	0x08001203
 800117c:	08001203 	.word	0x08001203
 8001180:	08001203 	.word	0x08001203
 8001184:	08001203 	.word	0x08001203
 8001188:	08001203 	.word	0x08001203
 800118c:	08001203 	.word	0x08001203
 8001190:	08001203 	.word	0x08001203
 8001194:	08001203 	.word	0x08001203
 8001198:	080011b1 	.word	0x080011b1
 800119c:	080011c5 	.word	0x080011c5
 80011a0:	4a79      	ldr	r2, [pc, #484]	; (8001388 <HAL_GPIO_Init+0x2b4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a6:	e02c      	b.n	8001202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e029      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	3304      	adds	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e024      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	3308      	adds	r3, #8
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e01f      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	330c      	adds	r3, #12
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e01a      	b.n	8001204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d6:	2304      	movs	r3, #4
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e013      	b.n	8001204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e4:	2308      	movs	r3, #8
 80011e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	611a      	str	r2, [r3, #16]
          break;
 80011ee:	e009      	b.n	8001204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	615a      	str	r2, [r3, #20]
          break;
 80011fa:	e003      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
          break;
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x130>
          break;
 8001202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d801      	bhi.n	800120e <HAL_GPIO_Init+0x13a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	e001      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3304      	adds	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	; 0xff
 8001218:	d802      	bhi.n	8001220 <HAL_GPIO_Init+0x14c>
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x152>
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	3b08      	subs	r3, #8
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	210f      	movs	r1, #15
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	6a39      	ldr	r1, [r7, #32]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80b1 	beq.w	80013b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x2b8>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_GPIO_Init+0x2b8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2bc>)
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <HAL_GPIO_Init+0x2c0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d013      	beq.n	80012c0 <HAL_GPIO_Init+0x1ec>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a3f      	ldr	r2, [pc, #252]	; (8001398 <HAL_GPIO_Init+0x2c4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00d      	beq.n	80012bc <HAL_GPIO_Init+0x1e8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a3e      	ldr	r2, [pc, #248]	; (800139c <HAL_GPIO_Init+0x2c8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d007      	beq.n	80012b8 <HAL_GPIO_Init+0x1e4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <HAL_GPIO_Init+0x2cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_GPIO_Init+0x1e0>
 80012b0:	2303      	movs	r3, #3
 80012b2:	e006      	b.n	80012c2 <HAL_GPIO_Init+0x1ee>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e004      	b.n	80012c2 <HAL_GPIO_Init+0x1ee>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x1ee>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <HAL_GPIO_Init+0x1ee>
 80012c0:	2300      	movs	r3, #0
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	f002 0203 	and.w	r2, r2, #3
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	4093      	lsls	r3, r2
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d2:	492f      	ldr	r1, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x2bc>)
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	492c      	ldr	r1, [pc, #176]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fa:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4928      	ldr	r1, [pc, #160]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4922      	ldr	r1, [pc, #136]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e006      	b.n	8001330 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	43db      	mvns	r3, r3
 800132a:	491e      	ldr	r1, [pc, #120]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800132c:	4013      	ands	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	4918      	ldr	r1, [pc, #96]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4914      	ldr	r1, [pc, #80]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d021      	beq.n	80013a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	490e      	ldr	r1, [pc, #56]	; (80013a4 <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	60cb      	str	r3, [r1, #12]
 8001370:	e021      	b.n	80013b6 <HAL_GPIO_Init+0x2e2>
 8001372:	bf00      	nop
 8001374:	10320000 	.word	0x10320000
 8001378:	10310000 	.word	0x10310000
 800137c:	10220000 	.word	0x10220000
 8001380:	10210000 	.word	0x10210000
 8001384:	10120000 	.word	0x10120000
 8001388:	10110000 	.word	0x10110000
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	40010800 	.word	0x40010800
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40011000 	.word	0x40011000
 80013a0:	40011400 	.word	0x40011400
 80013a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_GPIO_Init+0x304>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4909      	ldr	r1, [pc, #36]	; (80013d8 <HAL_GPIO_Init+0x304>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	3301      	adds	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f47f ae8e 	bne.w	80010e8 <HAL_GPIO_Init+0x14>
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	372c      	adds	r7, #44	; 0x2c
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	40010400 	.word	0x40010400

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	b08b      	sub	sp, #44	; 0x2c
 8001410:	af06      	add	r7, sp, #24
 8001412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0fd      	b.n	800161a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f006 fffe 	bl	8008434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f002 ffe9 	bl	800441c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	687e      	ldr	r6, [r7, #4]
 8001452:	466d      	mov	r5, sp
 8001454:	f106 0410 	add.w	r4, r6, #16
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	1d33      	adds	r3, r6, #4
 8001462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f002 ffb3 	bl	80043d0 <USB_CoreInit>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0ce      	b.n	800161a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f002 ffe4 	bl	8004450 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e04c      	b.n	8001528 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	3301      	adds	r3, #1
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	b298      	uxth	r0, r3
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3336      	adds	r3, #54	; 0x36
 80014cc:	4602      	mov	r2, r0
 80014ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	3303      	adds	r3, #3
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	3338      	adds	r3, #56	; 0x38
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	333c      	adds	r3, #60	; 0x3c
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	440b      	add	r3, r1
 800151c:	3340      	adds	r3, #64	; 0x40
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfa      	ldrb	r2, [r7, #15]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3ad      	bcc.n	800148e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	e044      	b.n	80015c2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	f203 1369 	addw	r3, r3, #361	; 0x169
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3b5      	bcc.n	8001538 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	687e      	ldr	r6, [r7, #4]
 80015d4:	466d      	mov	r5, sp
 80015d6:	f106 0410 	add.w	r4, r6, #16
 80015da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	602b      	str	r3, [r5, #0]
 80015e2:	1d33      	adds	r3, r6, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f002 ff3e 	bl	8004468 <USB_DevInit>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d005      	beq.n	80015fe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00d      	b.n	800161a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 f8c5 	bl	80067a2 <USB_DevDisconnect>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001622 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e015      	b.n	8001660 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f005 f87b 	bl	800673c <USB_StopDevice>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e007      	b.n	8001660 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f006 ff15 	bl	8008480 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_PCD_Start+0x16>
 800167a:	2302      	movs	r3, #2
 800167c:	e016      	b.n	80016ac <HAL_PCD_Start+0x44>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f002 feb0 	bl	80043f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001690:	2101      	movs	r1, #1
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f007 f991 	bl	80089ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f005 f876 	bl	800678e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_PCD_Stop+0x16>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e016      	b.n	80016f8 <HAL_PCD_Stop+0x44>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fea0 	bl	800441c <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 80016dc:	2100      	movs	r1, #0
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f007 f96b 	bl	80089ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 f85a 	bl	80067a2 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f005 f852 	bl	80067b6 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800171c:	d102      	bne.n	8001724 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fb61 	bl	8001de6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f005 f844 	bl	80067b6 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d112      	bne.n	8001760 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f006 ff03 	bl	800855e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f925 	bl	80019aa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 f826 	bl	80067b6 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001774:	d10b      	bne.n	800178e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f005 f80f 	bl	80067b6 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017a2:	d10b      	bne.n	80017bc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b6:	b292      	uxth	r2, r2
 80017b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fff8 	bl	80067b6 <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d0:	d126      	bne.n	8001820 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0204 	bic.w	r2, r2, #4
 80017e4:	b292      	uxth	r2, r2
 80017e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0208 	bic.w	r2, r2, #8
 80017fc:	b292      	uxth	r2, r2
 80017fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f006 fee4 	bl	80085d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f004 ffc6 	bl	80067b6 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001834:	f040 8084 	bne.w	8001940 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	77fb      	strb	r3, [r7, #31]
 800183c:	e011      	b.n	8001862 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	7ffb      	ldrb	r3, [r7, #31]
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	b292      	uxth	r2, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	f107 0120 	add.w	r1, r7, #32
 8001856:	440b      	add	r3, r1
 8001858:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	3301      	adds	r3, #1
 8001860:	77fb      	strb	r3, [r7, #31]
 8001862:	7ffb      	ldrb	r3, [r7, #31]
 8001864:	2b07      	cmp	r3, #7
 8001866:	d9ea      	bls.n	800183e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001870:	b29a      	uxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	b292      	uxth	r2, r2
 800187c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	b292      	uxth	r2, r2
 8001894:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001898:	bf00      	nop
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f6      	beq.n	800189a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018be:	b292      	uxth	r2, r2
 80018c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	77fb      	strb	r3, [r7, #31]
 80018c8:	e010      	b.n	80018ec <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4611      	mov	r1, r2
 80018d2:	7ffa      	ldrb	r2, [r7, #31]
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	440a      	add	r2, r1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	f107 0120 	add.w	r1, r7, #32
 80018de:	440b      	add	r3, r1
 80018e0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018e6:	7ffb      	ldrb	r3, [r7, #31]
 80018e8:	3301      	adds	r3, #1
 80018ea:	77fb      	strb	r3, [r7, #31]
 80018ec:	7ffb      	ldrb	r3, [r7, #31]
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	d9eb      	bls.n	80018ca <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0208 	orr.w	r2, r2, #8
 8001904:	b292      	uxth	r2, r2
 8001906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191c:	b292      	uxth	r2, r2
 800191e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0204 	orr.w	r2, r2, #4
 8001934:	b292      	uxth	r2, r2
 8001936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f006 fe2e 	bl	800859c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f004 ff36 	bl	80067b6 <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001954:	d10e      	bne.n	8001974 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f006 fde7 	bl	8008542 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f004 ff1c 	bl	80067b6 <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d10b      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199c:	b292      	uxth	r2, r2
 800199e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_SetAddress+0x1a>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e013      	b.n	80019ec <HAL_PCD_SetAddress+0x42>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fec3 	bl	8006768 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	70fb      	strb	r3, [r7, #3]
 8001a06:	460b      	mov	r3, r1
 8001a08:	803b      	strh	r3, [r7, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da0e      	bge.n	8001a38 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	705a      	strb	r2, [r3, #1]
 8001a36:	e00e      	b.n	8001a56 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 0207 	and.w	r2, r3, #7
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a62:	883a      	ldrh	r2, [r7, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	78ba      	ldrb	r2, [r7, #2]
 8001a6c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	785b      	ldrb	r3, [r3, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d102      	bne.n	8001a8c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_EP_Open+0xa6>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e00e      	b.n	8001ab8 <HAL_PCD_EP_Open+0xc4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fcfd 	bl	80044a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0e      	bge.n	8001af2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	705a      	strb	r2, [r3, #1]
 8001af0:	e00e      	b.n	8001b10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	f003 0207 	and.w	r2, r3, #7
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_Close+0x6a>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_Close+0x88>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f81f 	bl	8004b7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 0207 	and.w	r2, r3, #7
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6979      	ldr	r1, [r7, #20]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 f9d1 	bl	8004f54 <USB_EPStartXfer>
 8001bb2:	e005      	b.n	8001bc0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6979      	ldr	r1, [r7, #20]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 f9ca 	bl	8004f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 0207 	and.w	r2, r3, #7
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bec:	681b      	ldr	r3, [r3, #0]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c08:	7afb      	ldrb	r3, [r7, #11]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2201      	movs	r2, #1
 8001c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 f977 	bl	8004f54 <USB_EPStartXfer>
 8001c66:	e005      	b.n	8001c74 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6979      	ldr	r1, [r7, #20]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 f970 	bl	8004f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f003 0207 	and.w	r2, r3, #7
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d901      	bls.n	8001c9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e04c      	b.n	8001d36 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da0e      	bge.n	8001cc2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	705a      	strb	r2, [r3, #1]
 8001cc0:	e00c      	b.n	8001cdc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_EP_SetStall+0x7e>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e01c      	b.n	8001d36 <HAL_PCD_EP_SetStall+0xb8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fc19 	bl	8006542 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4610      	mov	r0, r2
 8001d28:	f004 fd54 	bl	80067d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 020f 	and.w	r2, r3, #15
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d901      	bls.n	8001d5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e040      	b.n	8001dde <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0e      	bge.n	8001d82 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00e      	b.n	8001da0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	f003 0207 	and.w	r2, r3, #7
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_ClrStall+0x82>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e00e      	b.n	8001dde <HAL_PCD_EP_ClrStall+0xa0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fc07 	bl	80065e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b08e      	sub	sp, #56	; 0x38
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001dee:	e2ec      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001df8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8161 	bne.w	80020d2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d152      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2a:	81fb      	strh	r3, [r7, #14]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3328      	adds	r3, #40	; 0x28
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	441a      	add	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f006 fb44 	bl	800850e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 829b 	beq.w	80023ca <PCD_EP_ISR_Handler+0x5e4>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 8296 	bne.w	80023ca <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ebe:	e284      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ed0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d034      	beq.n	8001f44 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	3306      	adds	r3, #6
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f004 fcab 	bl	8006874 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	823b      	strh	r3, [r7, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	8a3a      	ldrh	r2, [r7, #16]
 8001f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 fab9 	bl	80084b4 <HAL_PCD_SetupStageCallback>
 8001f42:	e242      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f280 823e 	bge.w	80023ca <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	83bb      	strh	r3, [r7, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	8bba      	ldrh	r2, [r7, #28]
 8001f64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f68:	b292      	uxth	r2, r2
 8001f6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	3306      	adds	r3, #6
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d019      	beq.n	8001fd4 <PCD_EP_ISR_Handler+0x1ee>
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	6959      	ldr	r1, [r3, #20]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f004 fc5b 	bl	8006874 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	441a      	add	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f006 fa82 	bl	80084d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f040 81f2 	bne.w	80023ca <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	61bb      	str	r3, [r7, #24]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d112      	bne.n	8002034 <PCD_EP_ISR_Handler+0x24e>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002018:	b29a      	uxth	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202c:	b29a      	uxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	e02f      	b.n	8002094 <PCD_EP_ISR_Handler+0x2ae>
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b3e      	cmp	r3, #62	; 0x3e
 800203a:	d813      	bhi.n	8002064 <PCD_EP_ISR_Handler+0x27e>
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <PCD_EP_ISR_Handler+0x270>
 8002050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002052:	3301      	adds	r3, #1
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	b29b      	uxth	r3, r3
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	b29a      	uxth	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	e017      	b.n	8002094 <PCD_EP_ISR_Handler+0x2ae>
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <PCD_EP_ISR_Handler+0x298>
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	3b01      	subs	r3, #1
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	b29b      	uxth	r3, r3
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	b29b      	uxth	r3, r3
 8002086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800208a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800208e:	b29a      	uxth	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a4:	827b      	strh	r3, [r7, #18]
 80020a6:	8a7b      	ldrh	r3, [r7, #18]
 80020a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020ac:	827b      	strh	r3, [r7, #18]
 80020ae:	8a7b      	ldrh	r3, [r7, #18]
 80020b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020b4:	827b      	strh	r3, [r7, #18]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	8a7b      	ldrh	r3, [r7, #18]
 80020bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	8013      	strh	r3, [r2, #0]
 80020d0:	e17b      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f280 80ea 	bge.w	80022c2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002104:	4013      	ands	r3, r2
 8002106:	853b      	strh	r3, [r7, #40]	; 0x28
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002118:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800211c:	b292      	uxth	r2, r2
 800211e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002120:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d122      	bne.n	8002184 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	3306      	adds	r3, #6
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	6959      	ldr	r1, [r3, #20]
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	88da      	ldrh	r2, [r3, #6]
 800217c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217e:	f004 fb79 	bl	8006874 <USB_ReadPMA>
 8002182:	e07c      	b.n	800227e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	78db      	ldrb	r3, [r3, #3]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d108      	bne.n	800219e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800218c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800218e:	461a      	mov	r2, r3
 8002190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f927 	bl	80023e6 <HAL_PCD_EP_DB_Receive>
 8002198:	4603      	mov	r3, r0
 800219a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800219c:	e06f      	b.n	800227e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021da:	b29b      	uxth	r3, r3
 80021dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d021      	beq.n	800223c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	3302      	adds	r3, #2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02a      	beq.n	800227e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	891a      	ldrh	r2, [r3, #8]
 8002234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002236:	f004 fb1d 	bl	8006874 <USB_ReadPMA>
 800223a:	e020      	b.n	800227e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	3306      	adds	r3, #6
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002264:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002266:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	6959      	ldr	r1, [r3, #20]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	895a      	ldrh	r2, [r3, #10]
 8002278:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800227a:	f004 fafb 	bl	8006874 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002284:	441a      	add	r2, r3
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002290:	441a      	add	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <PCD_EP_ISR_Handler+0x4c2>
 800229e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d206      	bcs.n	80022b6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f006 f912 	bl	80084d8 <HAL_PCD_DataOutStageCallback>
 80022b4:	e005      	b.n	80022c2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fe49 	bl	8004f54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d07e      	beq.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80022cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	843b      	strh	r3, [r7, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	8c3b      	ldrh	r3, [r7, #32]
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	78db      	ldrb	r3, [r3, #3]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d00c      	beq.n	800233a <PCD_EP_ISR_Handler+0x554>
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	78db      	ldrb	r3, [r3, #3]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d146      	bne.n	80023be <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002330:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d141      	bne.n	80023be <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	3302      	adds	r3, #2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002362:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	8bfb      	ldrh	r3, [r7, #30]
 800236a:	429a      	cmp	r2, r3
 800236c:	d906      	bls.n	800237c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	8bfb      	ldrh	r3, [r7, #30]
 8002374:	1ad2      	subs	r2, r2, r3
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	619a      	str	r2, [r3, #24]
 800237a:	e002      	b.n	8002382 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f006 f8bc 	bl	800850e <HAL_PCD_DataInStageCallback>
 8002396:	e018      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	8bfb      	ldrh	r3, [r7, #30]
 800239e:	441a      	add	r2, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	8bfb      	ldrh	r3, [r7, #30]
 80023aa:	441a      	add	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fdcc 	bl	8004f54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80023bc:	e005      	b.n	80023ca <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023c0:	461a      	mov	r2, r3
 80023c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f91b 	bl	8002600 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f6ff ad0a 	blt.w	8001df0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3738      	adds	r7, #56	; 0x38
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d07e      	beq.n	80024fc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	3302      	adds	r3, #2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002426:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	8b7b      	ldrh	r3, [r7, #26]
 800242e:	429a      	cmp	r2, r3
 8002430:	d306      	bcc.n	8002440 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	8b7b      	ldrh	r3, [r7, #26]
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	e002      	b.n	8002446 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d123      	bne.n	8002496 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002468:	833b      	strh	r3, [r7, #24]
 800246a:	8b3b      	ldrh	r3, [r7, #24]
 800246c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002470:	833b      	strh	r3, [r7, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	8b3b      	ldrh	r3, [r7, #24]
 8002482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002492:	b29b      	uxth	r3, r3
 8002494:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01f      	beq.n	80024e0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	82fb      	strh	r3, [r7, #22]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	8afb      	ldrh	r3, [r7, #22]
 80024cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024dc:	b29b      	uxth	r3, r3
 80024de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024e0:	8b7b      	ldrh	r3, [r7, #26]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6959      	ldr	r1, [r3, #20]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	891a      	ldrh	r2, [r3, #8]
 80024f4:	8b7b      	ldrh	r3, [r7, #26]
 80024f6:	f004 f9bd 	bl	8006874 <USB_ReadPMA>
 80024fa:	e07c      	b.n	80025f6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	3306      	adds	r3, #6
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002524:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	8b7b      	ldrh	r3, [r7, #26]
 800252c:	429a      	cmp	r2, r3
 800252e:	d306      	bcc.n	800253e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	8b7b      	ldrh	r3, [r7, #26]
 8002536:	1ad2      	subs	r2, r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	e002      	b.n	8002544 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d123      	bne.n	8002594 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	83fb      	strh	r3, [r7, #30]
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800256e:	83fb      	strh	r3, [r7, #30]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	441a      	add	r2, r3
 800257e:	8bfb      	ldrh	r3, [r7, #30]
 8002580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002590:	b29b      	uxth	r3, r3
 8002592:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11f      	bne.n	80025de <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b8:	83bb      	strh	r3, [r7, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	8bbb      	ldrh	r3, [r7, #28]
 80025ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025da:	b29b      	uxth	r3, r3
 80025dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025de:	8b7b      	ldrh	r3, [r7, #26]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6959      	ldr	r1, [r3, #20]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	895a      	ldrh	r2, [r3, #10]
 80025f0:	8b7b      	ldrh	r3, [r7, #26]
 80025f2:	f004 f93f 	bl	8006874 <USB_ReadPMA>
    }
  }

  return count;
 80025f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0a2      	sub	sp, #136	; 0x88
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 81c7 	beq.w	80029a8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800264e:	429a      	cmp	r2, r3
 8002650:	d907      	bls.n	8002662 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	619a      	str	r2, [r3, #24]
 8002660:	e002      	b.n	8002668 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 80b9 	bne.w	80027e4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d126      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	4413      	add	r3, r2
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	011a      	lsls	r2, r3, #4
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	4413      	add	r3, r2
 800269c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	801a      	strh	r2, [r3, #0]
 80026c6:	e01a      	b.n	80026fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d116      	bne.n	80026fe <HAL_PCD_EP_DB_Transmit+0xfe>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	633b      	str	r3, [r7, #48]	; 0x30
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	4413      	add	r3, r2
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	011a      	lsls	r2, r3, #4
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	4413      	add	r3, r2
 80026f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d126      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x15a>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	011a      	lsls	r2, r3, #4
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273e:	b29a      	uxth	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	e017      	b.n	800278a <HAL_PCD_EP_DB_Transmit+0x18a>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	785b      	ldrb	r3, [r3, #1]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d113      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	4413      	add	r3, r2
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	011a      	lsls	r2, r3, #4
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	4413      	add	r3, r2
 800277e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2200      	movs	r2, #0
 8002788:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f005 febc 	bl	800850e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 82d4 	beq.w	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027bc:	827b      	strh	r3, [r7, #18]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	441a      	add	r2, r3
 80027cc:	8a7b      	ldrh	r3, [r7, #18]
 80027ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027de:	b29b      	uxth	r3, r3
 80027e0:	8013      	strh	r3, [r2, #0]
 80027e2:	e2b2      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d021      	beq.n	8002832 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002838:	2b01      	cmp	r3, #1
 800283a:	f040 8286 	bne.w	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002846:	441a      	add	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002854:	441a      	add	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	429a      	cmp	r2, r3
 8002864:	d309      	bcc.n	800287a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002872:	1ad2      	subs	r2, r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	621a      	str	r2, [r3, #32]
 8002878:	e015      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002886:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002890:	e009      	b.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d155      	bne.n	800295a <HAL_PCD_EP_DB_Transmit+0x35a>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	4413      	add	r3, r2
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
 80028d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d112      	bne.n	8002902 <HAL_PCD_EP_DB_Transmit+0x302>
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	801a      	strh	r2, [r3, #0]
 8002900:	e047      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x392>
 8002902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002904:	2b3e      	cmp	r3, #62	; 0x3e
 8002906:	d811      	bhi.n	800292c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48
 800290e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291a:	3301      	adds	r3, #1
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
 800291e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002920:	b29b      	uxth	r3, r3
 8002922:	029b      	lsls	r3, r3, #10
 8002924:	b29a      	uxth	r2, r3
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	e032      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x392>
 800292c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_PCD_EP_DB_Transmit+0x342>
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	3b01      	subs	r3, #1
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
 8002942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002944:	b29b      	uxth	r3, r3
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	b29b      	uxth	r3, r3
 800294a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002952:	b29a      	uxth	r2, r3
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	801a      	strh	r2, [r3, #0]
 8002958:	e01b      	b.n	8002992 <HAL_PCD_EP_DB_Transmit+0x392>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d117      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x392>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	643b      	str	r3, [r7, #64]	; 0x40
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002976:	4413      	add	r3, r2
 8002978:	643b      	str	r3, [r7, #64]	; 0x40
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002982:	4413      	add	r3, r2
 8002984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298c:	b29a      	uxth	r2, r3
 800298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002990:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6959      	ldr	r1, [r3, #20]
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	891a      	ldrh	r2, [r3, #8]
 800299e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f003 ff22 	bl	80067ea <USB_WritePMA>
 80029a6:	e1d0      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	3306      	adds	r3, #6
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029dc:	429a      	cmp	r2, r3
 80029de:	d307      	bcc.n	80029f0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e8:	1ad2      	subs	r2, r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	619a      	str	r2, [r3, #24]
 80029ee:	e002      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80c4 	bne.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d126      	bne.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x456>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1c:	4413      	add	r3, r2
 8002a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	011a      	lsls	r2, r3, #4
 8002a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a28:	4413      	add	r3, r2
 8002a2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3e:	801a      	strh	r2, [r3, #0]
 8002a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	e01a      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d116      	bne.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	677b      	str	r3, [r7, #116]	; 0x74
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a72:	4413      	add	r3, r2
 8002a74:	677b      	str	r3, [r7, #116]	; 0x74
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	011a      	lsls	r2, r3, #4
 8002a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7e:	4413      	add	r3, r2
 8002a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a84:	673b      	str	r3, [r7, #112]	; 0x70
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	2200      	movs	r2, #0
 8002a8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12f      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	011a      	lsls	r2, r3, #4
 8002abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	e017      	b.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d113      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b10:	4413      	add	r3, r2
 8002b12:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	011a      	lsls	r2, r3, #4
 8002b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b26:	2200      	movs	r2, #0
 8002b28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f005 fcec 	bl	800850e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 8104 	bne.w	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	441a      	add	r2, r3
 8002b6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
 8002b86:	e0e0      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d121      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	f040 80b4 	bne.w	8002d4a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bea:	441a      	add	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf8:	441a      	add	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d309      	bcc.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6a1a      	ldr	r2, [r3, #32]
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	621a      	str	r2, [r3, #32]
 8002c1c:	e015      	b.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002c26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c34:	e009      	b.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d155      	bne.n	8002d04 <HAL_PCD_EP_DB_Transmit+0x704>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	4413      	add	r3, r2
 8002c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	011a      	lsls	r2, r3, #4
 8002c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c78:	4413      	add	r3, r2
 8002c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d112      	bne.n	8002cac <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca8:	801a      	strh	r2, [r3, #0]
 8002caa:	e044      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x736>
 8002cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cae:	2b3e      	cmp	r3, #62	; 0x3e
 8002cb0:	d811      	bhi.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	e02f      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x736>
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	657b      	str	r3, [r7, #84]	; 0x54
 8002cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	657b      	str	r3, [r7, #84]	; 0x54
 8002cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	e018      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	785b      	ldrb	r3, [r3, #1]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d114      	bne.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d1a:	4413      	add	r3, r2
 8002d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011a      	lsls	r2, r3, #4
 8002d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d26:	4413      	add	r3, r2
 8002d28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d34:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6959      	ldr	r1, [r3, #20]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	895a      	ldrh	r2, [r3, #10]
 8002d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 fd50 	bl	80067ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d64:	823b      	strh	r3, [r7, #16]
 8002d66:	8a3b      	ldrh	r3, [r7, #16]
 8002d68:	f083 0310 	eor.w	r3, r3, #16
 8002d6c:	823b      	strh	r3, [r7, #16]
 8002d6e:	8a3b      	ldrh	r3, [r7, #16]
 8002d70:	f083 0320 	eor.w	r3, r3, #32
 8002d74:	823b      	strh	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	441a      	add	r2, r3
 8002d84:	8a3b      	ldrh	r3, [r7, #16]
 8002d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3788      	adds	r7, #136	; 0x88
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	817b      	strh	r3, [r7, #10]
 8002db2:	4613      	mov	r3, r2
 8002db4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00b      	beq.n	8002dda <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	897b      	ldrh	r3, [r7, #10]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e009      	b.n	8002dee <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dda:	897a      	ldrh	r2, [r7, #10]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dee:	893b      	ldrh	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	80da      	strh	r2, [r3, #6]
 8002e02:	e00b      	b.n	8002e1c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2201      	movs	r2, #1
 8002e08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e2e:	f7fd fd33 	bl	8000898 <HAL_GetTick>
 8002e32:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e34:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a44      	ldr	r2, [pc, #272]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fd fd29 	bl	8000898 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e077      	b.n	8002f44 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e54:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8002e60:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e70:	f7fd fd12 	bl	8000898 <HAL_GetTick>
 8002e74:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7e:	f7fd fd0b 	bl	8000898 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e057      	b.n	8002f44 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_DeInit+0x128>)
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <HAL_RCC_DeInit+0x12c>)
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCC_DeInit+0x130>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fcb2 	bl	8000814 <HAL_InitTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e044      	b.n	8002f44 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002eba:	f7fd fced 	bl	8000898 <HAL_GetTick>
 8002ebe:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fd fce3 	bl	8000898 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e031      	b.n	8002f44 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ef2:	f7fd fcd1 	bl	8000898 <HAL_GetTick>
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002efe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f02:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f06:	f7fd fcc7 	bl	8000898 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e015      	b.n	8002f44 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCC_DeInit+0x124>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	20000000 	.word	0x20000000
 8002f54:	007a1200 	.word	0x007a1200
 8002f58:	20000004 	.word	0x20000004

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e26c      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 8087 	beq.w	800308a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7c:	4b92      	ldr	r3, [pc, #584]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f88:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d112      	bne.n	8002fba <HAL_RCC_OscConfig+0x5e>
 8002f94:	4b8c      	ldr	r3, [pc, #560]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d10b      	bne.n	8002fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa2:	4b89      	ldr	r3, [pc, #548]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06c      	beq.n	8003088 <HAL_RCC_OscConfig+0x12c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d168      	bne.n	8003088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e246      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x76>
 8002fc4:	4b80      	ldr	r3, [pc, #512]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7f      	ldr	r2, [pc, #508]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e02e      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x98>
 8002fda:	4b7b      	ldr	r3, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7a      	ldr	r2, [pc, #488]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b78      	ldr	r3, [pc, #480]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a77      	ldr	r2, [pc, #476]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0xbc>
 8002ffe:	4b72      	ldr	r3, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a71      	ldr	r2, [pc, #452]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b6f      	ldr	r3, [pc, #444]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xd4>
 8003018:	4b6b      	ldr	r3, [pc, #428]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a6a      	ldr	r2, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a67      	ldr	r2, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd fc2e 	bl	8000898 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003040:	f7fd fc2a 	bl	8000898 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1fa      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xe4>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fd fc1a 	bl	8000898 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003068:	f7fd fc16 	bl	8000898 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1e6      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x10c>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d063      	beq.n	800315e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003096:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030a2:	4b49      	ldr	r3, [pc, #292]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x18c>
 80030ae:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x176>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1ba      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e03a      	b.n	800315e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f6:	f7fd fbcf 	bl	8000898 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fd fbcb 	bl	8000898 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e19b      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4927      	ldr	r1, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x270>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd fbae 	bl	8000898 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003140:	f7fd fbaa 	bl	8000898 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e17a      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03a      	beq.n	80031e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d019      	beq.n	80031a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7fd fb8e 	bl	8000898 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003180:	f7fd fb8a 	bl	8000898 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e15a      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <HAL_RCC_OscConfig+0x26c>)
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800319e:	2001      	movs	r0, #1
 80031a0:	f000 fad8 	bl	8003754 <RCC_Delay>
 80031a4:	e01c      	b.n	80031e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_OscConfig+0x274>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ac:	f7fd fb74 	bl	8000898 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b2:	e00f      	b.n	80031d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b4:	f7fd fb70 	bl	8000898 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d908      	bls.n	80031d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e140      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	42420000 	.word	0x42420000
 80031d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	4b9e      	ldr	r3, [pc, #632]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e9      	bne.n	80031b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80a6 	beq.w	800333a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4b97      	ldr	r3, [pc, #604]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b94      	ldr	r3, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4a93      	ldr	r2, [pc, #588]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	61d3      	str	r3, [r2, #28]
 800320a:	4b91      	ldr	r3, [pc, #580]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b8e      	ldr	r3, [pc, #568]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8a      	ldr	r2, [pc, #552]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7fd fb31 	bl	8000898 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fd fb2d 	bl	8000898 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b64      	cmp	r3, #100	; 0x64
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0fd      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x4f8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x312>
 8003260:	4b7b      	ldr	r3, [pc, #492]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	e02d      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x334>
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a72      	ldr	r2, [pc, #456]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6213      	str	r3, [r2, #32]
 800328e:	e01c      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <HAL_RCC_OscConfig+0x356>
 8003298:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4a6c      	ldr	r2, [pc, #432]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800329e:	f043 0304 	orr.w	r3, r3, #4
 80032a2:	6213      	str	r3, [r2, #32]
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a69      	ldr	r2, [pc, #420]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e00b      	b.n	80032ca <HAL_RCC_OscConfig+0x36e>
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	4a66      	ldr	r2, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6213      	str	r3, [r2, #32]
 80032be:	4b64      	ldr	r3, [pc, #400]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4a63      	ldr	r2, [pc, #396]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d2:	f7fd fae1 	bl	8000898 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fadd 	bl	8000898 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0ab      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCC_OscConfig+0x37e>
 80032fc:	e014      	b.n	8003328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fd facb 	bl	8000898 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fd fac7 	bl	8000898 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e095      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ee      	bne.n	8003306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b48      	ldr	r3, [pc, #288]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a47      	ldr	r2, [pc, #284]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8081 	beq.w	8003446 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d061      	beq.n	8003414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d146      	bne.n	80033e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fa9b 	bl	8000898 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fa97 	bl	8000898 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e067      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800338e:	4b30      	ldr	r3, [pc, #192]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	492d      	ldr	r1, [pc, #180]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a19      	ldr	r1, [r3, #32]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	430b      	orrs	r3, r1
 80033b2:	4927      	ldr	r1, [pc, #156]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fa6b 	bl	8000898 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fa67 	bl	8000898 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e037      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x46a>
 80033e4:	e02f      	b.n	8003446 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCC_OscConfig+0x4fc>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fa54 	bl	8000898 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd fa50 	bl	8000898 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e020      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x498>
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e013      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	429a      	cmp	r2, r3
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	40007000 	.word	0x40007000
 8003458:	42420060 	.word	0x42420060

0800345c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d0      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4965      	ldr	r1, [pc, #404]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0b8      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b8:	4b59      	ldr	r3, [pc, #356]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a58      	ldr	r2, [pc, #352]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b50      	ldr	r3, [pc, #320]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	494d      	ldr	r1, [pc, #308]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d040      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d115      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e07f      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e073      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e06b      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b39      	ldr	r3, [pc, #228]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4936      	ldr	r1, [pc, #216]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fd f9a4 	bl	8000898 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fd f9a0 	bl	8000898 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e053      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2d      	ldr	r3, [pc, #180]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d210      	bcs.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 0207 	bic.w	r2, r3, #7
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e032      	b.n	8003612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4916      	ldr	r1, [pc, #88]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	490e      	ldr	r1, [pc, #56]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ea:	f000 f821 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035ee:	4602      	mov	r2, r0
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	490a      	ldr	r1, [pc, #40]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	5ccb      	ldrb	r3, [r1, r3]
 80035fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1cc>)
 8003604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_ClockConfig+0x1d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd f902 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40022000 	.word	0x40022000
 8003620:	40021000 	.word	0x40021000
 8003624:	08008b00 	.word	0x08008b00
 8003628:	20000000 	.word	0x20000000
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b490      	push	{r4, r7}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003638:	1d3c      	adds	r4, r7, #4
 800363a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800363c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003640:	f240 2301 	movw	r3, #513	; 0x201
 8003644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d002      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x40>
 800366a:	2b08      	cmp	r3, #8
 800366c:	d003      	beq.n	8003676 <HAL_RCC_GetSysClockFreq+0x46>
 800366e:	e02d      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003672:	623b      	str	r3, [r7, #32]
      break;
 8003674:	e02d      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003682:	4413      	add	r3, r2
 8003684:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003688:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	0c5b      	lsrs	r3, r3, #17
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036a2:	4413      	add	r3, r2
 80036a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ae:	fb02 f203 	mul.w	r2, r2, r3
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ba:	e004      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	4a0b      	ldr	r2, [pc, #44]	; (80036ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	623b      	str	r3, [r7, #32]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	623b      	str	r3, [r7, #32]
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6a3b      	ldr	r3, [r7, #32]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc90      	pop	{r4, r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	08008aa8 	.word	0x08008aa8
 80036e4:	40021000 	.word	0x40021000
 80036e8:	007a1200 	.word	0x007a1200
 80036ec:	003d0900 	.word	0x003d0900

080036f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <HAL_RCC_GetHCLKFreq+0x10>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff2 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	08008b10 	.word	0x08008b10

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffde 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0adb      	lsrs	r3, r3, #11
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08008b10 	.word	0x08008b10

08003754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCC_Delay+0x34>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <RCC_Delay+0x38>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a5b      	lsrs	r3, r3, #9
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003770:	bf00      	nop
  }
  while (Delay --);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	60fa      	str	r2, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f9      	bne.n	8003770 <RCC_Delay+0x1c>
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000000 	.word	0x20000000
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fd f852 	bl	8000898 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fd f84e 	bl	8000898 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e06d      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d027      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd f81d 	bl	8000898 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd f819 	bl	8000898 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e036      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	490b      	ldr	r1, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420440 	.word	0x42420440

080038fc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f815 	bl	8003950 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0202 	bic.w	r2, r2, #2
 8003934:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	745a      	strb	r2, [r3, #17]
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010400 	.word	0x40010400

08003950 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e03f      	b.n	80039f4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fc fe67 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2224      	movs	r2, #36	; 0x24
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fc84 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d17c      	bne.n	8003b16 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Transmit+0x2c>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e075      	b.n	8003b18 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit+0x3e>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e06e      	b.n	8003b18 <HAL_UART_Transmit+0x11c>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a50:	f7fc ff22 	bl	8000898 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d108      	bne.n	8003a7e <HAL_UART_Transmit+0x82>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	e003      	b.n	8003a86 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a8e:	e02a      	b.n	8003ae6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fa37 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e036      	b.n	8003b18 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003abe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e007      	b.n	8003ad8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1cf      	bne.n	8003a90 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2200      	movs	r2, #0
 8003af8:	2140      	movs	r1, #64	; 0x40
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa07 	bl	8003f0e <UART_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e006      	b.n	8003b18 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d11d      	bne.n	8003b76 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Receive_IT+0x26>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e016      	b.n	8003b78 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Receive_IT+0x38>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e00f      	b.n	8003b78 <HAL_UART_Receive_IT+0x58>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa18 	bl	8003fa2 <UART_Start_Receive_IT>
 8003b72:	4603      	mov	r3, r0
 8003b74:	e000      	b.n	8003b78 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x52>
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fac9 	bl	8004162 <UART_Receive_IT>
      return;
 8003bd0:	e17b      	b.n	8003eca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80b1 	beq.w	8003d3c <HAL_UART_IRQHandler+0x1bc>
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x70>
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80a6 	beq.w	8003d3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_UART_IRQHandler+0x90>
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_UART_IRQHandler+0xb0>
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0202 	orr.w	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_UART_IRQHandler+0xd0>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f043 0204 	orr.w	r2, r3, #4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00f      	beq.n	8003c7a <HAL_UART_IRQHandler+0xfa>
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_UART_IRQHandler+0xee>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 811e 	beq.w	8003ec0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <HAL_UART_IRQHandler+0x11e>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fa62 	bl	8004162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x146>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d031      	beq.n	8003d2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f9a4 	bl	8004014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d013      	beq.n	8003d1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	4a76      	ldr	r2, [pc, #472]	; (8003ed0 <HAL_UART_IRQHandler+0x350>)
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc ff72 	bl	8000be8 <HAL_DMA_Abort_IT>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d14:	4610      	mov	r0, r2
 8003d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d18:	e00e      	b.n	8003d38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8e3 	bl	8003ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	e00a      	b.n	8003d38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8df 	bl	8003ee6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	e006      	b.n	8003d38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8db 	bl	8003ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d36:	e0c3      	b.n	8003ec0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	bf00      	nop
    return;
 8003d3a:	e0c1      	b.n	8003ec0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 80a1 	bne.w	8003e88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 809b 	beq.w	8003e88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8095 	beq.w	8003e88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04e      	beq.n	8003e20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d8c:	8a3b      	ldrh	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8098 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d98:	8a3a      	ldrh	r2, [r7, #16]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	f080 8092 	bcs.w	8003ec4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8a3a      	ldrh	r2, [r7, #16]
 8003da4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d02b      	beq.n	8003e08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0210 	bic.w	r2, r2, #16
 8003dfc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fc feb5 	bl	8000b72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f86d 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e1e:	e051      	b.n	8003ec4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d047      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e38:	8a7b      	ldrh	r3, [r7, #18]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d044      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0210 	bic.w	r2, r2, #16
 8003e7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e7c:	8a7b      	ldrh	r3, [r7, #18]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f839 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e86:	e01f      	b.n	8003ec8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x324>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8f9 	bl	8004094 <UART_Transmit_IT>
    return;
 8003ea2:	e012      	b.n	8003eca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <HAL_UART_IRQHandler+0x34a>
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f93a 	bl	8004132 <UART_EndTransmit_IT>
    return;
 8003ebe:	e004      	b.n	8003eca <HAL_UART_IRQHandler+0x34a>
    return;
 8003ec0:	bf00      	nop
 8003ec2:	e002      	b.n	8003eca <HAL_UART_IRQHandler+0x34a>
      return;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <HAL_UART_IRQHandler+0x34a>
      return;
 8003ec8:	bf00      	nop
  }
}
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	0800406d 	.word	0x0800406d

08003ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	e02c      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d028      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2e:	f7fc fcb3 	bl	8000898 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d21d      	bcs.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00f      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d0c3      	beq.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	4613      	mov	r3, r2
 8003fae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2222      	movs	r2, #34	; 0x22
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0220 	orr.w	r2, r2, #32
 8004006:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800402a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0210 	bic.w	r2, r2, #16
 8004052:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr

0800406c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff ff2d 	bl	8003ee6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b21      	cmp	r3, #33	; 0x21
 80040a6:	d13e      	bne.n	8004126 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d114      	bne.n	80040dc <UART_Transmit_IT+0x48>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d110      	bne.n	80040dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]
 80040da:	e008      	b.n	80040ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	1c59      	adds	r1, r3, #1
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6211      	str	r1, [r2, #32]
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4619      	mov	r1, r3
 80040fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004110:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004120:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff febe 	bl	8003ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b22      	cmp	r3, #34	; 0x22
 8004174:	f040 8099 	bne.w	80042aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d117      	bne.n	80041b2 <UART_Receive_IT+0x50>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d113      	bne.n	80041b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
 80041b0:	e026      	b.n	8004200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c4:	d007      	beq.n	80041d6 <UART_Receive_IT+0x74>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <UART_Receive_IT+0x82>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e008      	b.n	80041f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29b      	uxth	r3, r3
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4619      	mov	r1, r3
 800420e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004210:	2b00      	cmp	r3, #0
 8004212:	d148      	bne.n	80042a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0220 	bic.w	r2, r2, #32
 8004222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d123      	bne.n	800429c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0210 	bic.w	r2, r2, #16
 8004268:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d10a      	bne.n	800428e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fe2f 	bl	8003ef8 <HAL_UARTEx_RxEventCallback>
 800429a:	e002      	b.n	80042a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fb ffa3 	bl	80001e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e002      	b.n	80042ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ee:	f023 030c 	bic.w	r3, r3, #12
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699a      	ldr	r2, [r3, #24]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <UART_SetConfig+0x114>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d103      	bne.n	8004324 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800431c:	f7ff fa06 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	e002      	b.n	800432a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7ff f9ee 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8004328:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009a      	lsls	r2, r3, #2
 8004334:	441a      	add	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <UART_SetConfig+0x118>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	0119      	lsls	r1, r3, #4
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009a      	lsls	r2, r3, #2
 8004354:	441a      	add	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004360:	4b1a      	ldr	r3, [pc, #104]	; (80043cc <UART_SetConfig+0x118>)
 8004362:	fba3 0302 	umull	r0, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2064      	movs	r0, #100	; 0x64
 800436a:	fb00 f303 	mul.w	r3, r0, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <UART_SetConfig+0x118>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004380:	4419      	add	r1, r3
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fbb2 f2f3 	udiv	r2, r2, r3
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <UART_SetConfig+0x118>)
 800439a:	fba3 0302 	umull	r0, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2064      	movs	r0, #100	; 0x64
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	3332      	adds	r3, #50	; 0x32
 80043ac:	4a07      	ldr	r2, [pc, #28]	; (80043cc <UART_SetConfig+0x118>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	440a      	add	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40013800 	.word	0x40013800
 80043cc:	51eb851f 	.word	0x51eb851f

080043d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043d0:	b084      	sub	sp, #16
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	f107 0014 	add.w	r0, r7, #20
 80043de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	b004      	add	sp, #16
 80043ee:	4770      	bx	lr

080043f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004400:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004404:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004424:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004428:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	b29b      	uxth	r3, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	b29b      	uxth	r3, r3
 800443a:	4013      	ands	r3, r2
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004468:	b084      	sub	sp, #16
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	f107 0014 	add.w	r0, r7, #20
 8004476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	b004      	add	sp, #16
 80044a6:	4770      	bx	lr

080044a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b09b      	sub	sp, #108	; 0x6c
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	78db      	ldrb	r3, [r3, #3]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d81f      	bhi.n	800451a <USB_ActivateEndpoint+0x72>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <USB_ActivateEndpoint+0x38>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004523 	.word	0x08004523
 80044ec:	080044ff 	.word	0x080044ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044fc:	e012      	b.n	8004524 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004502:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800450a:	e00b      	b.n	8004524 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800450c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004514:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004518:	e004      	b.n	8004524 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004520:	e000      	b.n	8004524 <USB_ActivateEndpoint+0x7c>
      break;
 8004522:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455c:	b29a      	uxth	r2, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7b1b      	ldrb	r3, [r3, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 8149 	bne.w	8004828 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8084 	beq.w	80046a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	011a      	lsls	r2, r3, #4
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	88db      	ldrh	r3, [r3, #6]
 80045c8:	085b      	lsrs	r3, r3, #1
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	81fb      	strh	r3, [r7, #14]
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <USB_ActivateEndpoint+0x17c>
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	81bb      	strh	r3, [r7, #12]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	89bb      	ldrh	r3, [r7, #12]
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	78db      	ldrb	r3, [r3, #3]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d020      	beq.n	800466e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004642:	813b      	strh	r3, [r7, #8]
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	f083 0320 	eor.w	r3, r3, #32
 800464a:	813b      	strh	r3, [r7, #8]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	893b      	ldrh	r3, [r7, #8]
 8004658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004668:	b29b      	uxth	r3, r3
 800466a:	8013      	strh	r3, [r2, #0]
 800466c:	e27f      	b.n	8004b6e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	8013      	strh	r3, [r2, #0]
 80046a6:	e262      	b.n	8004b6e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	4413      	add	r3, r2
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	88db      	ldrh	r3, [r3, #6]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	4413      	add	r3, r2
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	4413      	add	r3, r2
 80046fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046fe:	623b      	str	r3, [r7, #32]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d112      	bne.n	800472e <USB_ActivateEndpoint+0x286>
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004712:	b29a      	uxth	r2, r3
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004726:	b29a      	uxth	r2, r3
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e02f      	b.n	800478e <USB_ActivateEndpoint+0x2e6>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b3e      	cmp	r3, #62	; 0x3e
 8004734:	d813      	bhi.n	800475e <USB_ActivateEndpoint+0x2b6>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	663b      	str	r3, [r7, #96]	; 0x60
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <USB_ActivateEndpoint+0x2a8>
 800474a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800474c:	3301      	adds	r3, #1
 800474e:	663b      	str	r3, [r7, #96]	; 0x60
 8004750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004752:	b29b      	uxth	r3, r3
 8004754:	029b      	lsls	r3, r3, #10
 8004756:	b29a      	uxth	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	801a      	strh	r2, [r3, #0]
 800475c:	e017      	b.n	800478e <USB_ActivateEndpoint+0x2e6>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	2b00      	cmp	r3, #0
 8004770:	d102      	bne.n	8004778 <USB_ActivateEndpoint+0x2d0>
 8004772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004774:	3b01      	subs	r3, #1
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
 8004778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800477a:	b29b      	uxth	r3, r3
 800477c:	029b      	lsls	r3, r3, #10
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	83fb      	strh	r3, [r7, #30]
 800479c:	8bfb      	ldrh	r3, [r7, #30]
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01b      	beq.n	80047de <USB_ActivateEndpoint+0x336>
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	83bb      	strh	r3, [r7, #28]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	8bbb      	ldrh	r3, [r7, #28]
 80047ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f4:	837b      	strh	r3, [r7, #26]
 80047f6:	8b7b      	ldrh	r3, [r7, #26]
 80047f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047fc:	837b      	strh	r3, [r7, #26]
 80047fe:	8b7b      	ldrh	r3, [r7, #26]
 8004800:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004804:	837b      	strh	r3, [r7, #26]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
 8004826:	e1a2      	b.n	8004b6e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	65bb      	str	r3, [r7, #88]	; 0x58
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004874:	4413      	add	r3, r2
 8004876:	65bb      	str	r3, [r7, #88]	; 0x58
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	011a      	lsls	r2, r3, #4
 800487e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004880:	4413      	add	r3, r2
 8004882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	891b      	ldrh	r3, [r3, #8]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a8:	4413      	add	r3, r2
 80048aa:	653b      	str	r3, [r7, #80]	; 0x50
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	895b      	ldrh	r3, [r3, #10]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 8091 	bne.w	80049f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80048e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01b      	beq.n	8004926 <USB_ActivateEndpoint+0x47e>
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004904:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800491e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004922:	b29b      	uxth	r3, r3
 8004924:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	873b      	strh	r3, [r7, #56]	; 0x38
 8004934:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01b      	beq.n	8004976 <USB_ActivateEndpoint+0x4ce>
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	441a      	add	r2, r3
 8004960:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004972:	b29b      	uxth	r3, r3
 8004974:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800498e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004990:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004994:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004996:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004998:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800499c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e0ba      	b.n	8004b6e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01d      	beq.n	8004a50 <USB_ActivateEndpoint+0x5a8>
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01d      	beq.n	8004aa8 <USB_ActivateEndpoint+0x600>
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d024      	beq.n	8004afa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ace:	f083 0320 	eor.w	r3, r3, #32
 8004ad2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
 8004af8:	e01d      	b.n	8004b36 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	376c      	adds	r7, #108	; 0x6c
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b08d      	sub	sp, #52	; 0x34
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	7b1b      	ldrb	r3, [r3, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 808e 	bne.w	8004cac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d044      	beq.n	8004c22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	81bb      	strh	r3, [r7, #12]
 8004ba6:	89bb      	ldrh	r3, [r7, #12]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <USB_DeactivateEndpoint+0x6c>
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	817b      	strh	r3, [r7, #10]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	897b      	ldrh	r3, [r7, #10]
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfe:	813b      	strh	r3, [r7, #8]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]
 8004c20:	e192      	b.n	8004f48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	827b      	strh	r3, [r7, #18]
 8004c30:	8a7b      	ldrh	r3, [r7, #18]
 8004c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <USB_DeactivateEndpoint+0xf6>
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	823b      	strh	r3, [r7, #16]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	8a3b      	ldrh	r3, [r7, #16]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	81fb      	strh	r3, [r7, #14]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	89fb      	ldrh	r3, [r7, #14]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
 8004caa:	e14d      	b.n	8004f48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 80a5 	bne.w	8004e00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	843b      	strh	r3, [r7, #32]
 8004cc4:	8c3b      	ldrh	r3, [r7, #32]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <USB_DeactivateEndpoint+0x18a>
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce4:	83fb      	strh	r3, [r7, #30]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	8bfb      	ldrh	r3, [r7, #30]
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	83bb      	strh	r3, [r7, #28]
 8004d14:	8bbb      	ldrh	r3, [r7, #28]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01b      	beq.n	8004d56 <USB_DeactivateEndpoint+0x1da>
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	837b      	strh	r3, [r7, #26]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	8b7b      	ldrh	r3, [r7, #26]
 8004d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	833b      	strh	r3, [r7, #24]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	8b3b      	ldrh	r3, [r7, #24]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	82fb      	strh	r3, [r7, #22]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	441a      	add	r2, r3
 8004db0:	8afb      	ldrh	r3, [r7, #22]
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ddc:	82bb      	strh	r3, [r7, #20]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	8abb      	ldrh	r3, [r7, #20]
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]
 8004dfe:	e0a3      	b.n	8004f48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <USB_DeactivateEndpoint+0x2d4>
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <USB_DeactivateEndpoint+0x324>
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3734      	adds	r7, #52	; 0x34
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b0cc      	sub	sp, #304	; 0x130
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	1d3b      	adds	r3, r7, #4
 8004f5c:	6018      	str	r0, [r3, #0]
 8004f5e:	463b      	mov	r3, r7
 8004f60:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f62:	463b      	mov	r3, r7
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	785b      	ldrb	r3, [r3, #1]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	f040 872e 	bne.w	8005dca <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f6e:	463b      	mov	r3, r7
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699a      	ldr	r2, [r3, #24]
 8004f74:	463b      	mov	r3, r7
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d905      	bls.n	8004f8a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004f88:	e004      	b.n	8004f94 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	7b1b      	ldrb	r3, [r3, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d134      	bne.n	8005008 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6959      	ldr	r1, [r3, #20]
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	88da      	ldrh	r2, [r3, #6]
 8004faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	1d38      	adds	r0, r7, #4
 8004fb2:	6800      	ldr	r0, [r0, #0]
 8004fb4:	f001 fc19 	bl	80067ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fb8:	f107 0310 	add.w	r3, r7, #16
 8004fbc:	1d3a      	adds	r2, r7, #4
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	4619      	mov	r1, r3
 8004fce:	f107 0310 	add.w	r3, r7, #16
 8004fd2:	f107 0210 	add.w	r2, r7, #16
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	440a      	add	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	011a      	lsls	r2, r3, #4
 8004fe4:	f107 0310 	add.w	r3, r7, #16
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4413      	add	r3, r2
 8004fec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ff0:	f107 030c 	add.w	r3, r7, #12
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	f000 beac 	b.w	8005d60 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005008:	463b      	mov	r3, r7
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	78db      	ldrb	r3, [r3, #3]
 800500e:	2b02      	cmp	r3, #2
 8005010:	f040 838c 	bne.w	800572c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	463b      	mov	r3, r7
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	f240 8330 	bls.w	8005686 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005026:	1d3b      	adds	r3, r7, #4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005074:	1ad2      	subs	r2, r2, r3
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 819e 	beq.w	80053d4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800509c:	1d3a      	adds	r2, r7, #4
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d17a      	bne.n	80051a2 <USB_EPStartXfer+0x24e>
 80050ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b0:	1d3a      	adds	r2, r7, #4
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4619      	mov	r1, r3
 80050c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	440a      	add	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4413      	add	r3, r2
 80050e0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80050e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d11a      	bne.n	8005128 <USB_EPStartXfer+0x1d4>
 80050f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005100:	b29a      	uxth	r2, r3
 8005102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	e062      	b.n	80051ee <USB_EPStartXfer+0x29a>
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	2b3e      	cmp	r3, #62	; 0x3e
 800512e:	d819      	bhi.n	8005164 <USB_EPStartXfer+0x210>
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800513a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <USB_EPStartXfer+0x1fc>
 8005146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800514a:	3301      	adds	r3, #1
 800514c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005150:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005154:	b29b      	uxth	r3, r3
 8005156:	029b      	lsls	r3, r3, #10
 8005158:	b29a      	uxth	r2, r3
 800515a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	e044      	b.n	80051ee <USB_EPStartXfer+0x29a>
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800516e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <USB_EPStartXfer+0x230>
 800517a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800517e:	3b01      	subs	r3, #1
 8005180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005188:	b29b      	uxth	r3, r3
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005196:	b29a      	uxth	r2, r3
 8005198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	801a      	strh	r2, [r3, #0]
 80051a0:	e025      	b.n	80051ee <USB_EPStartXfer+0x29a>
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d120      	bne.n	80051ee <USB_EPStartXfer+0x29a>
 80051ac:	1d3b      	adds	r3, r7, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	440a      	add	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	011a      	lsls	r2, r3, #4
 80051ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6959      	ldr	r1, [r3, #20]
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	b29b      	uxth	r3, r3
 8005204:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005208:	1d38      	adds	r0, r7, #4
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f001 faed 	bl	80067ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005210:	463b      	mov	r3, r7
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521a:	441a      	add	r2, r3
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	463b      	mov	r3, r7
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	d909      	bls.n	8005246 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005232:	463b      	mov	r3, r7
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	621a      	str	r2, [r3, #32]
 8005244:	e008      	b.n	8005258 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005250:	463b      	mov	r3, r7
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d17a      	bne.n	8005358 <USB_EPStartXfer+0x404>
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	1d3a      	adds	r2, r7, #4
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005274:	b29b      	uxth	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	f107 0218 	add.w	r2, r7, #24
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	440a      	add	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	011a      	lsls	r2, r3, #4
 800528e:	f107 0318 	add.w	r3, r7, #24
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d11a      	bne.n	80052de <USB_EPStartXfer+0x38a>
 80052a8:	f107 0314 	add.w	r3, r7, #20
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	f107 0314 	add.w	r3, r7, #20
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	e067      	b.n	80053ae <USB_EPStartXfer+0x45a>
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e2:	2b3e      	cmp	r3, #62	; 0x3e
 80052e4:	d819      	bhi.n	800531a <USB_EPStartXfer+0x3c6>
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <USB_EPStartXfer+0x3b2>
 80052fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005300:	3301      	adds	r3, #1
 8005302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005306:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800530a:	b29b      	uxth	r3, r3
 800530c:	029b      	lsls	r3, r3, #10
 800530e:	b29a      	uxth	r2, r3
 8005310:	f107 0314 	add.w	r3, r7, #20
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e049      	b.n	80053ae <USB_EPStartXfer+0x45a>
 800531a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <USB_EPStartXfer+0x3e6>
 8005330:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005334:	3b01      	subs	r3, #1
 8005336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800533a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800533e:	b29b      	uxth	r3, r3
 8005340:	029b      	lsls	r3, r3, #10
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	f107 0314 	add.w	r3, r7, #20
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e02a      	b.n	80053ae <USB_EPStartXfer+0x45a>
 8005358:	463b      	mov	r3, r7
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d125      	bne.n	80053ae <USB_EPStartXfer+0x45a>
 8005362:	f107 0320 	add.w	r3, r7, #32
 8005366:	1d3a      	adds	r2, r7, #4
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	f107 0320 	add.w	r3, r7, #32
 800537c:	f107 0220 	add.w	r2, r7, #32
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	440a      	add	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	463b      	mov	r3, r7
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	011a      	lsls	r2, r3, #4
 800538e:	f107 0320 	add.w	r3, r7, #32
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800539a:	f107 031c 	add.w	r3, r7, #28
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f107 031c 	add.w	r3, r7, #28
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ae:	463b      	mov	r3, r7
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	891b      	ldrh	r3, [r3, #8]
 80053b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6959      	ldr	r1, [r3, #20]
 80053be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053c8:	1d38      	adds	r0, r7, #4
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	f001 fa0d 	bl	80067ea <USB_WritePMA>
 80053d0:	f000 bcc6 	b.w	8005d60 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d164      	bne.n	80054a8 <USB_EPStartXfer+0x554>
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e4:	1d3b      	adds	r3, r7, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f2:	4413      	add	r3, r2
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	011a      	lsls	r2, r3, #4
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	4413      	add	r3, r2
 8005402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d112      	bne.n	8005436 <USB_EPStartXfer+0x4e2>
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541a:	b29a      	uxth	r2, r3
 800541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e057      	b.n	80054e6 <USB_EPStartXfer+0x592>
 8005436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543a:	2b3e      	cmp	r3, #62	; 0x3e
 800543c:	d817      	bhi.n	800546e <USB_EPStartXfer+0x51a>
 800543e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <USB_EPStartXfer+0x50a>
 8005454:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005458:	3301      	adds	r3, #1
 800545a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800545e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005462:	b29b      	uxth	r3, r3
 8005464:	029b      	lsls	r3, r3, #10
 8005466:	b29a      	uxth	r2, r3
 8005468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	e03b      	b.n	80054e6 <USB_EPStartXfer+0x592>
 800546e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <USB_EPStartXfer+0x53a>
 8005484:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005488:	3b01      	subs	r3, #1
 800548a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800548e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005492:	b29b      	uxth	r3, r3
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	b29b      	uxth	r3, r3
 8005498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e01e      	b.n	80054e6 <USB_EPStartXfer+0x592>
 80054a8:	463b      	mov	r3, r7
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d119      	bne.n	80054e6 <USB_EPStartXfer+0x592>
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	653b      	str	r3, [r7, #80]	; 0x50
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	4413      	add	r3, r2
 80054c8:	653b      	str	r3, [r7, #80]	; 0x50
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	891b      	ldrh	r3, [r3, #8]
 80054ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005500:	1d38      	adds	r0, r7, #4
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	f001 f971 	bl	80067ea <USB_WritePMA>
            ep->xfer_buff += len;
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	441a      	add	r2, r3
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800551a:	463b      	mov	r3, r7
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d909      	bls.n	800553e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800552a:	463b      	mov	r3, r7
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	1ad2      	subs	r2, r2, r3
 8005536:	463b      	mov	r3, r7
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	621a      	str	r2, [r3, #32]
 800553c:	e008      	b.n	8005550 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005548:	463b      	mov	r3, r7
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2200      	movs	r2, #0
 800554e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005550:	1d3b      	adds	r3, r7, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	643b      	str	r3, [r7, #64]	; 0x40
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d164      	bne.n	800562a <USB_EPStartXfer+0x6d6>
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556e:	b29b      	uxth	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	4413      	add	r3, r2
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
 8005578:	463b      	mov	r3, r7
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	011a      	lsls	r2, r3, #4
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	4413      	add	r3, r2
 8005584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
 800558a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d112      	bne.n	80055b8 <USB_EPStartXfer+0x664>
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800559c:	b29a      	uxth	r2, r3
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e054      	b.n	8005662 <USB_EPStartXfer+0x70e>
 80055b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055bc:	2b3e      	cmp	r3, #62	; 0x3e
 80055be:	d817      	bhi.n	80055f0 <USB_EPStartXfer+0x69c>
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <USB_EPStartXfer+0x68c>
 80055d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055da:	3301      	adds	r3, #1
 80055dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e038      	b.n	8005662 <USB_EPStartXfer+0x70e>
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <USB_EPStartXfer+0x6bc>
 8005606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800560a:	3b01      	subs	r3, #1
 800560c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005614:	b29b      	uxth	r3, r3
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e01b      	b.n	8005662 <USB_EPStartXfer+0x70e>
 800562a:	463b      	mov	r3, r7
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d116      	bne.n	8005662 <USB_EPStartXfer+0x70e>
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	4413      	add	r3, r2
 8005644:	643b      	str	r3, [r7, #64]	; 0x40
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	011a      	lsls	r2, r3, #4
 800564e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005650:	4413      	add	r3, r2
 8005652:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800565c:	b29a      	uxth	r2, r3
 800565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005660:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005662:	463b      	mov	r3, r7
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	895b      	ldrh	r3, [r3, #10]
 8005668:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6959      	ldr	r1, [r3, #20]
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	b29b      	uxth	r3, r3
 8005678:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800567c:	1d38      	adds	r0, r7, #4
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	f001 f8b3 	bl	80067ea <USB_WritePMA>
 8005684:	e36c      	b.n	8005d60 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056d4:	1d3b      	adds	r3, r7, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e8:	4413      	add	r3, r2
 80056ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	011a      	lsls	r2, r3, #4
 80056f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80056fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005702:	b29a      	uxth	r2, r3
 8005704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005706:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005708:	463b      	mov	r3, r7
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	891b      	ldrh	r3, [r3, #8]
 800570e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6959      	ldr	r1, [r3, #20]
 8005718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571c:	b29b      	uxth	r3, r3
 800571e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005722:	1d38      	adds	r0, r7, #4
 8005724:	6800      	ldr	r0, [r0, #0]
 8005726:	f001 f860 	bl	80067ea <USB_WritePMA>
 800572a:	e319      	b.n	8005d60 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800575c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005764:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	463b      	mov	r3, r7
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8162 	beq.w	8005a62 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d164      	bne.n	800587a <USB_EPStartXfer+0x926>
 80057b0:	1d3b      	adds	r3, r7, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057be:	b29b      	uxth	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c4:	4413      	add	r3, r2
 80057c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	011a      	lsls	r2, r3, #4
 80057d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d2:	4413      	add	r3, r2
 80057d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d8:	677b      	str	r3, [r7, #116]	; 0x74
 80057da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d112      	bne.n	8005808 <USB_EPStartXfer+0x8b4>
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005800:	b29a      	uxth	r2, r3
 8005802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005804:	801a      	strh	r2, [r3, #0]
 8005806:	e057      	b.n	80058b8 <USB_EPStartXfer+0x964>
 8005808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580c:	2b3e      	cmp	r3, #62	; 0x3e
 800580e:	d817      	bhi.n	8005840 <USB_EPStartXfer+0x8ec>
 8005810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800581a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <USB_EPStartXfer+0x8dc>
 8005826:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800582a:	3301      	adds	r3, #1
 800582c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005830:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005834:	b29b      	uxth	r3, r3
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	b29a      	uxth	r2, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e03b      	b.n	80058b8 <USB_EPStartXfer+0x964>
 8005840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800584a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2b00      	cmp	r3, #0
 8005854:	d104      	bne.n	8005860 <USB_EPStartXfer+0x90c>
 8005856:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800585a:	3b01      	subs	r3, #1
 800585c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005860:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005864:	b29b      	uxth	r3, r3
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	b29b      	uxth	r3, r3
 800586a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005872:	b29a      	uxth	r2, r3
 8005874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	e01e      	b.n	80058b8 <USB_EPStartXfer+0x964>
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <USB_EPStartXfer+0x964>
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588c:	b29b      	uxth	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005894:	4413      	add	r3, r2
 8005896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	011a      	lsls	r2, r3, #4
 80058a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	895b      	ldrh	r3, [r3, #10]
 80058be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6959      	ldr	r1, [r3, #20]
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058d2:	1d38      	adds	r0, r7, #4
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f000 ff88 	bl	80067ea <USB_WritePMA>
          ep->xfer_buff += len;
 80058da:	463b      	mov	r3, r7
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058e4:	441a      	add	r2, r3
 80058e6:	463b      	mov	r3, r7
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	463b      	mov	r3, r7
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d909      	bls.n	8005910 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	621a      	str	r2, [r3, #32]
 800590e:	e008      	b.n	8005922 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005910:	463b      	mov	r3, r7
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2200      	movs	r2, #0
 8005920:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 821a 	beq.w	8005d60 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d164      	bne.n	8005a00 <USB_EPStartXfer+0xaac>
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	66bb      	str	r3, [r7, #104]	; 0x68
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594a:	4413      	add	r3, r2
 800594c:	66bb      	str	r3, [r7, #104]	; 0x68
 800594e:	463b      	mov	r3, r7
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005958:	4413      	add	r3, r2
 800595a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800595e:	667b      	str	r3, [r7, #100]	; 0x64
 8005960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d112      	bne.n	800598e <USB_EPStartXfer+0xa3a>
 8005968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005972:	b29a      	uxth	r2, r3
 8005974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005976:	801a      	strh	r2, [r3, #0]
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e057      	b.n	8005a3e <USB_EPStartXfer+0xaea>
 800598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005992:	2b3e      	cmp	r3, #62	; 0x3e
 8005994:	d817      	bhi.n	80059c6 <USB_EPStartXfer+0xa72>
 8005996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <USB_EPStartXfer+0xa62>
 80059ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059b0:	3301      	adds	r3, #1
 80059b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e03b      	b.n	8005a3e <USB_EPStartXfer+0xaea>
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <USB_EPStartXfer+0xa92>
 80059dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	029b      	lsls	r3, r3, #10
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	e01e      	b.n	8005a3e <USB_EPStartXfer+0xaea>
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d119      	bne.n	8005a3e <USB_EPStartXfer+0xaea>
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a1e:	4413      	add	r3, r2
 8005a20:	673b      	str	r3, [r7, #112]	; 0x70
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	891b      	ldrh	r3, [r3, #8]
 8005a44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a48:	463b      	mov	r3, r7
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6959      	ldr	r1, [r3, #20]
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a58:	1d38      	adds	r0, r7, #4
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	f000 fec5 	bl	80067ea <USB_WritePMA>
 8005a60:	e17e      	b.n	8005d60 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d16f      	bne.n	8005b4c <USB_EPStartXfer+0xbf8>
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a84:	4413      	add	r3, r2
 8005a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	011a      	lsls	r2, r3, #4
 8005a92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d116      	bne.n	8005ad6 <USB_EPStartXfer+0xb82>
 8005aa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e05f      	b.n	8005b96 <USB_EPStartXfer+0xc42>
 8005ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ada:	2b3e      	cmp	r3, #62	; 0x3e
 8005adc:	d818      	bhi.n	8005b10 <USB_EPStartXfer+0xbbc>
 8005ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d004      	beq.n	8005afe <USB_EPStartXfer+0xbaa>
 8005af4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005af8:	3301      	adds	r3, #1
 8005afa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	029b      	lsls	r3, r3, #10
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e042      	b.n	8005b96 <USB_EPStartXfer+0xc42>
 8005b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <USB_EPStartXfer+0xbdc>
 8005b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e024      	b.n	8005b96 <USB_EPStartXfer+0xc42>
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d11f      	bne.n	8005b96 <USB_EPStartXfer+0xc42>
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b5e:	1d3b      	adds	r3, r7, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b6e:	4413      	add	r3, r2
 8005b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	011a      	lsls	r2, r3, #4
 8005b7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b80:	4413      	add	r3, r2
 8005b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	891b      	ldrh	r3, [r3, #8]
 8005b9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6959      	ldr	r1, [r3, #20]
 8005ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bb0:	1d38      	adds	r0, r7, #4
 8005bb2:	6800      	ldr	r0, [r0, #0]
 8005bb4:	f000 fe19 	bl	80067ea <USB_WritePMA>
          ep->xfer_buff += len;
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc2:	441a      	add	r2, r3
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6a1a      	ldr	r2, [r3, #32]
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d909      	bls.n	8005bee <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005bda:	463b      	mov	r3, r7
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be4:	1ad2      	subs	r2, r2, r3
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	621a      	str	r2, [r3, #32]
 8005bec:	e008      	b.n	8005c00 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80ab 	beq.w	8005d60 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d16f      	bne.n	8005cfc <USB_EPStartXfer+0xda8>
 8005c1c:	1d3b      	adds	r3, r7, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c34:	4413      	add	r3, r2
 8005c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	011a      	lsls	r2, r3, #4
 8005c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d116      	bne.n	8005c86 <USB_EPStartXfer+0xd32>
 8005c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e05b      	b.n	8005d3e <USB_EPStartXfer+0xdea>
 8005c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8c:	d818      	bhi.n	8005cc0 <USB_EPStartXfer+0xd6c>
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <USB_EPStartXfer+0xd5a>
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e03e      	b.n	8005d3e <USB_EPStartXfer+0xdea>
 8005cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d104      	bne.n	8005ce0 <USB_EPStartXfer+0xd8c>
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	029b      	lsls	r3, r3, #10
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e020      	b.n	8005d3e <USB_EPStartXfer+0xdea>
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d11b      	bne.n	8005d3e <USB_EPStartXfer+0xdea>
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d16:	4413      	add	r3, r2
 8005d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d3e:	463b      	mov	r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	895b      	ldrh	r3, [r3, #10]
 8005d44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d48:	463b      	mov	r3, r7
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6959      	ldr	r1, [r3, #20]
 8005d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d58:	1d38      	adds	r0, r7, #4
 8005d5a:	6800      	ldr	r0, [r0, #0]
 8005d5c:	f000 fd45 	bl	80067ea <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d60:	1d3b      	adds	r3, r7, #4
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	463b      	mov	r3, r7
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	f107 020a 	add.w	r2, r7, #10
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7e:	8013      	strh	r3, [r2, #0]
 8005d80:	f107 030a 	add.w	r3, r7, #10
 8005d84:	f107 020a 	add.w	r2, r7, #10
 8005d88:	8812      	ldrh	r2, [r2, #0]
 8005d8a:	f082 0210 	eor.w	r2, r2, #16
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	f107 030a 	add.w	r3, r7, #10
 8005d94:	f107 020a 	add.w	r2, r7, #10
 8005d98:	8812      	ldrh	r2, [r2, #0]
 8005d9a:	f082 0220 	eor.w	r2, r2, #32
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	1d3b      	adds	r3, r7, #4
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	463b      	mov	r3, r7
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	f107 030a 	add.w	r3, r7, #10
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]
 8005dc8:	e3b5      	b.n	8006536 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005dca:	463b      	mov	r3, r7
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	7b1b      	ldrb	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 8090 	bne.w	8005ef6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d90e      	bls.n	8005e04 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005df0:	463b      	mov	r3, r7
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	619a      	str	r2, [r3, #24]
 8005e02:	e008      	b.n	8005e16 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e2e:	4413      	add	r3, r2
 8005e30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e34:	463b      	mov	r3, r7
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	011a      	lsls	r2, r3, #4
 8005e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e40:	4413      	add	r3, r2
 8005e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d116      	bne.n	8005e80 <USB_EPStartXfer+0xf2c>
 8005e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e32c      	b.n	80064da <USB_EPStartXfer+0x1586>
 8005e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e84:	2b3e      	cmp	r3, #62	; 0x3e
 8005e86:	d818      	bhi.n	8005eba <USB_EPStartXfer+0xf66>
 8005e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <USB_EPStartXfer+0xf54>
 8005e9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ea8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e30f      	b.n	80064da <USB_EPStartXfer+0x1586>
 8005eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <USB_EPStartXfer+0xf86>
 8005ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	029b      	lsls	r3, r3, #10
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e2f1      	b.n	80064da <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	78db      	ldrb	r3, [r3, #3]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f040 818f 	bne.w	8006220 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d175      	bne.n	8005ff8 <USB_EPStartXfer+0x10a4>
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f24:	4413      	add	r3, r2
 8005f26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f40:	463b      	mov	r3, r7
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d116      	bne.n	8005f78 <USB_EPStartXfer+0x1024>
 8005f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e065      	b.n	8006044 <USB_EPStartXfer+0x10f0>
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f80:	d81a      	bhi.n	8005fb8 <USB_EPStartXfer+0x1064>
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <USB_EPStartXfer+0x1052>
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e045      	b.n	8006044 <USB_EPStartXfer+0x10f0>
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <USB_EPStartXfer+0x1088>
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e025      	b.n	8006044 <USB_EPStartXfer+0x10f0>
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d120      	bne.n	8006044 <USB_EPStartXfer+0x10f0>
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800600a:	1d3b      	adds	r3, r7, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006012:	b29b      	uxth	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	4413      	add	r3, r2
 800601c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	011a      	lsls	r2, r3, #4
 8006028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602c:	4413      	add	r3, r2
 800602e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006032:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	b29a      	uxth	r2, r3
 800603e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800604c:	463b      	mov	r3, r7
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d175      	bne.n	8006142 <USB_EPStartXfer+0x11ee>
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006066:	b29b      	uxth	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800606e:	4413      	add	r3, r2
 8006070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006080:	4413      	add	r3, r2
 8006082:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d116      	bne.n	80060c2 <USB_EPStartXfer+0x116e>
 8006094:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	e061      	b.n	8006186 <USB_EPStartXfer+0x1232>
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ca:	d81a      	bhi.n	8006102 <USB_EPStartXfer+0x11ae>
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <USB_EPStartXfer+0x119c>
 80060e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060ea:	3301      	adds	r3, #1
 80060ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060fe:	801a      	strh	r2, [r3, #0]
 8006100:	e041      	b.n	8006186 <USB_EPStartXfer+0x1232>
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800610e:	463b      	mov	r3, r7
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <USB_EPStartXfer+0x11d2>
 800611c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006120:	3b01      	subs	r3, #1
 8006122:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006126:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800612a:	b29b      	uxth	r3, r3
 800612c:	029b      	lsls	r3, r3, #10
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e021      	b.n	8006186 <USB_EPStartXfer+0x1232>
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d11c      	bne.n	8006186 <USB_EPStartXfer+0x1232>
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800615c:	4413      	add	r3, r2
 800615e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800616e:	4413      	add	r3, r2
 8006170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006178:	463b      	mov	r3, r7
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	b29a      	uxth	r2, r3
 8006180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006184:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 81a4 	beq.w	80064da <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <USB_EPStartXfer+0x126a>
 80061b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 8187 	bne.w	80064da <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 8180 	bne.w	80064da <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	463b      	mov	r3, r7
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80061f8:	1d3b      	adds	r3, r7, #4
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800620a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800620e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006216:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800621a:	b29b      	uxth	r3, r3
 800621c:	8013      	strh	r3, [r2, #0]
 800621e:	e15c      	b.n	80064da <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	2b01      	cmp	r3, #1
 8006228:	f040 8155 	bne.w	80064d6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800622c:	463b      	mov	r3, r7
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	429a      	cmp	r2, r3
 800623a:	d90e      	bls.n	800625a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006246:	463b      	mov	r3, r7
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	619a      	str	r2, [r3, #24]
 8006258:	e008      	b.n	800626c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d16f      	bne.n	8006356 <USB_EPStartXfer+0x1402>
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800628e:	4413      	add	r3, r2
 8006290:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006294:	463b      	mov	r3, r7
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d116      	bne.n	80062e0 <USB_EPStartXfer+0x138c>
 80062b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e05f      	b.n	80063a0 <USB_EPStartXfer+0x144c>
 80062e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e4:	2b3e      	cmp	r3, #62	; 0x3e
 80062e6:	d818      	bhi.n	800631a <USB_EPStartXfer+0x13c6>
 80062e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <USB_EPStartXfer+0x13b4>
 80062fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006302:	3301      	adds	r3, #1
 8006304:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800630c:	b29b      	uxth	r3, r3
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	e042      	b.n	80063a0 <USB_EPStartXfer+0x144c>
 800631a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <USB_EPStartXfer+0x13e6>
 8006330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006334:	3b01      	subs	r3, #1
 8006336:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800633a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e024      	b.n	80063a0 <USB_EPStartXfer+0x144c>
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11f      	bne.n	80063a0 <USB_EPStartXfer+0x144c>
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	4413      	add	r3, r2
 800637a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638a:	4413      	add	r3, r2
 800638c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006390:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	1d3b      	adds	r3, r7, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a8:	463b      	mov	r3, r7
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d16f      	bne.n	8006492 <USB_EPStartXfer+0x153e>
 80063b2:	1d3b      	adds	r3, r7, #4
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ca:	4413      	add	r3, r2
 80063cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	011a      	lsls	r2, r3, #4
 80063d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063dc:	4413      	add	r3, r2
 80063de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d116      	bne.n	800641c <USB_EPStartXfer+0x14c8>
 80063ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e05e      	b.n	80064da <USB_EPStartXfer+0x1586>
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	2b3e      	cmp	r3, #62	; 0x3e
 8006422:	d818      	bhi.n	8006456 <USB_EPStartXfer+0x1502>
 8006424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d004      	beq.n	8006444 <USB_EPStartXfer+0x14f0>
 800643a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	e041      	b.n	80064da <USB_EPStartXfer+0x1586>
 8006456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <USB_EPStartXfer+0x1522>
 800646c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006470:	3b01      	subs	r3, #1
 8006472:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e023      	b.n	80064da <USB_EPStartXfer+0x1586>
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d11e      	bne.n	80064da <USB_EPStartXfer+0x1586>
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064b2:	463b      	mov	r3, r7
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	4413      	add	r3, r2
 80064c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d2:	801a      	strh	r2, [r3, #0]
 80064d4:	e001      	b.n	80064da <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e02e      	b.n	8006538 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80064f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006500:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006504:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006508:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800650c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	463b      	mov	r3, r7
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d020      	beq.n	8006596 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656a:	81bb      	strh	r3, [r7, #12]
 800656c:	89bb      	ldrh	r3, [r7, #12]
 800656e:	f083 0310 	eor.w	r3, r3, #16
 8006572:	81bb      	strh	r3, [r7, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
 8006594:	e01f      	b.n	80065d6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	81fb      	strh	r3, [r7, #14]
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065b4:	81fb      	strh	r3, [r7, #14]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 809d 	bne.w	8006730 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d04c      	beq.n	8006698 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	823b      	strh	r3, [r7, #16]
 800660c:	8a3b      	ldrh	r3, [r7, #16]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01b      	beq.n	800664e <USB_EPClearStall+0x6c>
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	81fb      	strh	r3, [r7, #14]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800664a:	b29b      	uxth	r3, r3
 800664c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	78db      	ldrb	r3, [r3, #3]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d06c      	beq.n	8006730 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666c:	81bb      	strh	r3, [r7, #12]
 800666e:	89bb      	ldrh	r3, [r7, #12]
 8006670:	f083 0320 	eor.w	r3, r3, #32
 8006674:	81bb      	strh	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	89bb      	ldrh	r3, [r7, #12]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]
 8006696:	e04b      	b.n	8006730 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	82fb      	strh	r3, [r7, #22]
 80066a6:	8afb      	ldrh	r3, [r7, #22]
 80066a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01b      	beq.n	80066e8 <USB_EPClearStall+0x106>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c6:	82bb      	strh	r3, [r7, #20]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8abb      	ldrh	r3, [r7, #20]
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	827b      	strh	r3, [r7, #18]
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006706:	827b      	strh	r3, [r7, #18]
 8006708:	8a7b      	ldrh	r3, [r7, #18]
 800670a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800670e:	827b      	strh	r3, [r7, #18]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	8a7b      	ldrh	r3, [r7, #18]
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2203      	movs	r2, #3
 8006758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr

0800678e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr

080067b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b08d      	sub	sp, #52	; 0x34
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	4611      	mov	r1, r2
 80067f6:	461a      	mov	r2, r3
 80067f8:	460b      	mov	r3, r1
 80067fa:	80fb      	strh	r3, [r7, #6]
 80067fc:	4613      	mov	r3, r2
 80067fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006800:	88bb      	ldrh	r3, [r7, #4]
 8006802:	3301      	adds	r3, #1
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	005a      	lsls	r2, r3, #1
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006822:	e01e      	b.n	8006862 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	3301      	adds	r3, #1
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	b29a      	uxth	r2, r3
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684c:	3302      	adds	r3, #2
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	3302      	adds	r3, #2
 8006854:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	3301      	adds	r3, #1
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	3b01      	subs	r3, #1
 8006860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1dd      	bne.n	8006824 <USB_WritePMA+0x3a>
  }
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3734      	adds	r7, #52	; 0x34
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006874:	b480      	push	{r7}
 8006876:	b08b      	sub	sp, #44	; 0x2c
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4611      	mov	r1, r2
 8006880:	461a      	mov	r2, r3
 8006882:	460b      	mov	r3, r1
 8006884:	80fb      	strh	r3, [r7, #6]
 8006886:	4613      	mov	r3, r2
 8006888:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800688a:	88bb      	ldrh	r3, [r7, #4]
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800689a:	88fb      	ldrh	r3, [r7, #6]
 800689c:	005a      	lsls	r2, r3, #1
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	e01b      	b.n	80068e6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	3302      	adds	r3, #2
 80068ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	0a1b      	lsrs	r3, r3, #8
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	3302      	adds	r3, #2
 80068de:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	3b01      	subs	r3, #1
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e0      	bne.n	80068ae <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80068ec:	88bb      	ldrh	r3, [r7, #4]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d007      	beq.n	8006908 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	b2da      	uxtb	r2, r3
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	701a      	strb	r2, [r3, #0]
  }
}
 8006908:	bf00      	nop
 800690a:	372c      	adds	r7, #44	; 0x2c
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr

08006912 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	7c1b      	ldrb	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d115      	bne.n	8006956 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800692a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800692e:	2202      	movs	r2, #2
 8006930:	2181      	movs	r1, #129	; 0x81
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 ff05 	bl	8008742 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800693e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006942:	2202      	movs	r2, #2
 8006944:	2101      	movs	r1, #1
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f001 fefb 	bl	8008742 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006954:	e012      	b.n	800697c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006956:	2340      	movs	r3, #64	; 0x40
 8006958:	2202      	movs	r2, #2
 800695a:	2181      	movs	r1, #129	; 0x81
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fef0 	bl	8008742 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006968:	2340      	movs	r3, #64	; 0x40
 800696a:	2202      	movs	r2, #2
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fee7 	bl	8008742 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800697c:	2308      	movs	r3, #8
 800697e:	2203      	movs	r2, #3
 8006980:	2182      	movs	r1, #130	; 0x82
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fedd 	bl	8008742 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800698e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006992:	f001 fffd 	bl	8008990 <USBD_static_malloc>
 8006996:	4602      	mov	r2, r0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d102      	bne.n	80069ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	e026      	b.n	80069fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	7c1b      	ldrb	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069e2:	2101      	movs	r1, #1
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 ff9d 	bl	8008924 <USBD_LL_PrepareReceive>
 80069ea:	e007      	b.n	80069fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	2101      	movs	r1, #1
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 ff94 	bl	8008924 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a16:	2181      	movs	r1, #129	; 0x81
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 feb8 	bl	800878e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a24:	2101      	movs	r1, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 feb1 	bl	800878e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a34:	2182      	movs	r1, #130	; 0x82
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fea9 	bl	800878e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 ffa3 	bl	80089a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d039      	beq.n	8006b12 <USBD_CDC_Setup+0x9e>
 8006a9e:	2b20      	cmp	r3, #32
 8006aa0:	d17f      	bne.n	8006ba2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d029      	beq.n	8006afe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da11      	bge.n	8006ad8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ac0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	88d2      	ldrh	r2, [r2, #6]
 8006ac6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ac8:	6939      	ldr	r1, [r7, #16]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	88db      	ldrh	r3, [r3, #6]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f9f8 	bl	8007ec6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ad6:	e06b      	b.n	8006bb0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	785a      	ldrb	r2, [r3, #1]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	88db      	ldrh	r3, [r3, #6]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006aee:	6939      	ldr	r1, [r7, #16]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	88db      	ldrh	r3, [r3, #6]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 fa13 	bl	8007f22 <USBD_CtlPrepareRx>
      break;
 8006afc:	e058      	b.n	8006bb0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	7850      	ldrb	r0, [r2, #1]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4798      	blx	r3
      break;
 8006b10:	e04e      	b.n	8006bb0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b0b      	cmp	r3, #11
 8006b18:	d02e      	beq.n	8006b78 <USBD_CDC_Setup+0x104>
 8006b1a:	2b0b      	cmp	r3, #11
 8006b1c:	dc38      	bgt.n	8006b90 <USBD_CDC_Setup+0x11c>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <USBD_CDC_Setup+0xb4>
 8006b22:	2b0a      	cmp	r3, #10
 8006b24:	d014      	beq.n	8006b50 <USBD_CDC_Setup+0xdc>
 8006b26:	e033      	b.n	8006b90 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	2202      	movs	r2, #2
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f9c3 	bl	8007ec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b40:	e02e      	b.n	8006ba0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f954 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e027      	b.n	8006ba0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b5a:	f107 030f 	add.w	r3, r7, #15
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f9af 	bl	8007ec6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b68:	e01a      	b.n	8006ba0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f940 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b72:	2302      	movs	r3, #2
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e013      	b.n	8006ba0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d00d      	beq.n	8006b9e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f934 	bl	8007df2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b8e:	e006      	b.n	8006b9e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 f92d 	bl	8007df2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9c:	e000      	b.n	8006ba0 <USBD_CDC_Setup+0x12c>
          break;
 8006b9e:	bf00      	nop
      }
      break;
 8006ba0:	e006      	b.n	8006bb0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f924 	bl	8007df2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	75fb      	strb	r3, [r7, #23]
      break;
 8006bae:	bf00      	nop
  }

  return ret;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bcc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bd4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d03a      	beq.n	8006c56 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006be0:	78fa      	ldrb	r2, [r7, #3]
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	331c      	adds	r3, #28
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d029      	beq.n	8006c4a <USBD_CDC_DataIn+0x90>
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	6879      	ldr	r1, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	331c      	adds	r3, #28
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	78f9      	ldrb	r1, [r7, #3]
 8006c0a:	68b8      	ldr	r0, [r7, #8]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4403      	add	r3, r0
 8006c16:	3338      	adds	r3, #56	; 0x38
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c1e:	fb03 f301 	mul.w	r3, r3, r1
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d110      	bne.n	8006c4a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	331c      	adds	r3, #28
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c3c:	78f9      	ldrb	r1, [r7, #3]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2200      	movs	r2, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fe4b 	bl	80088de <USBD_LL_Transmit>
 8006c48:	e003      	b.n	8006c52 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e000      	b.n	8006c58 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fe76 	bl	800896a <USBD_LL_GetRxDataSize>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00d      	beq.n	8006cac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4798      	blx	r3

    return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <USBD_CDC_EP0_RxReady+0x46>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cd6:	2bff      	cmp	r3, #255	; 0xff
 8006cd8:	d010      	beq.n	8006cfc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ce8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	22ff      	movs	r2, #255	; 0xff
 8006cf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2243      	movs	r2, #67	; 0x43
 8006d14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d16:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20000094 	.word	0x20000094

08006d28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2243      	movs	r2, #67	; 0x43
 8006d34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20000050 	.word	0x20000050

08006d48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2243      	movs	r2, #67	; 0x43
 8006d54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	200000d8 	.word	0x200000d8

08006d68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	220a      	movs	r2, #10
 8006d74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d76:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	2000000c 	.word	0x2000000c

08006d88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr

08006e0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7c1b      	ldrb	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d109      	bne.n	8006e42 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 fd72 	bl	8008924 <USBD_LL_PrepareReceive>
 8006e40:	e007      	b.n	8006e52 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fd69 	bl	8008924 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e56:	2302      	movs	r3, #2
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e74:	2302      	movs	r3, #2
 8006e76:	e01a      	b.n	8006eae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	79fa      	ldrb	r2, [r7, #7]
 8006ea4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f001 fba0 	bl	80085ec <USBD_LL_Init>

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6852      	ldr	r2, [r2, #4]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fc16 	bl	800870c <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fbdd 	bl	80086a0 <USBD_LL_DeInit>

  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e001      	b.n	8006f16 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f12:	2302      	movs	r3, #2
 8006f14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fbd3 	bl	80086d6 <USBD_LL_Start>

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00c      	beq.n	8006f82 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	78fa      	ldrb	r2, [r7, #3]
 8006f72:	4611      	mov	r1, r2
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	78fa      	ldrb	r2, [r7, #3]
 8006fa2:	4611      	mov	r1, r2
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fed8 	bl	8007d7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d016      	beq.n	800701c <USBD_LL_SetupStage+0x6a>
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d81c      	bhi.n	800702c <USBD_LL_SetupStage+0x7a>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <USBD_LL_SetupStage+0x4a>
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d008      	beq.n	800700c <USBD_LL_SetupStage+0x5a>
 8006ffa:	e017      	b.n	800702c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9cb 	bl	80073a0 <USBD_StdDevReq>
      break;
 800700a:	e01a      	b.n	8007042 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa2d 	bl	8007474 <USBD_StdItfReq>
      break;
 800701a:	e012      	b.n	8007042 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fa6d 	bl	8007504 <USBD_StdEPReq>
      break;
 800702a:	e00a      	b.n	8007042 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007032:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007036:	b2db      	uxtb	r3, r3
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f001 fbc6 	bl	80087cc <USBD_LL_StallEP>
      break;
 8007040:	bf00      	nop
  }

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d14b      	bne.n	80070f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007066:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800706e:	2b03      	cmp	r3, #3
 8007070:	d134      	bne.n	80070dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d919      	bls.n	80070b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007094:	429a      	cmp	r2, r3
 8007096:	d203      	bcs.n	80070a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800709c:	b29b      	uxth	r3, r3
 800709e:	e002      	b.n	80070a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 ff57 	bl	8007f5e <USBD_CtlContinueRx>
 80070b0:	e038      	b.n	8007124 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d105      	bne.n	80070d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 ff54 	bl	8007f82 <USBD_CtlSendStatus>
 80070da:	e023      	b.n	8007124 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e2:	2b05      	cmp	r3, #5
 80070e4:	d11e      	bne.n	8007124 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070ee:	2100      	movs	r1, #0
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f001 fb6b 	bl	80087cc <USBD_LL_StallEP>
 80070f6:	e015      	b.n	8007124 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00d      	beq.n	8007120 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800710a:	2b03      	cmp	r3, #3
 800710c:	d108      	bne.n	8007120 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	7afa      	ldrb	r2, [r7, #11]
 8007118:	4611      	mov	r1, r2
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	4798      	blx	r3
 800711e:	e001      	b.n	8007124 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007120:	2302      	movs	r3, #2
 8007122:	e000      	b.n	8007126 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	460b      	mov	r3, r1
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d17f      	bne.n	8007242 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3314      	adds	r3, #20
 8007146:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800714e:	2b02      	cmp	r3, #2
 8007150:	d15c      	bne.n	800720c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d915      	bls.n	800718a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	b29b      	uxth	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fec1 	bl	8007efe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800717c:	2300      	movs	r3, #0
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f001 fbce 	bl	8008924 <USBD_LL_PrepareReceive>
 8007188:	e04e      	b.n	8007228 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	6912      	ldr	r2, [r2, #16]
 8007192:	fbb3 f1f2 	udiv	r1, r3, r2
 8007196:	fb02 f201 	mul.w	r2, r2, r1
 800719a:	1a9b      	subs	r3, r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d11c      	bne.n	80071da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d316      	bcc.n	80071da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d20f      	bcs.n	80071da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fe9d 	bl	8007efe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	2100      	movs	r1, #0
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f001 fba6 	bl	8008924 <USBD_LL_PrepareReceive>
 80071d8:	e026      	b.n	8007228 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d105      	bne.n	80071fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071fc:	2180      	movs	r1, #128	; 0x80
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f001 fae4 	bl	80087cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fecf 	bl	8007fa8 <USBD_CtlReceiveStatus>
 800720a:	e00d      	b.n	8007228 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007212:	2b04      	cmp	r3, #4
 8007214:	d004      	beq.n	8007220 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007220:	2180      	movs	r1, #128	; 0x80
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f001 fad2 	bl	80087cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d11d      	bne.n	800726e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff fe81 	bl	8006f3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007240:	e015      	b.n	800726e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00d      	beq.n	800726a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007254:	2b03      	cmp	r3, #3
 8007256:	d108      	bne.n	800726a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	7afa      	ldrb	r2, [r7, #11]
 8007262:	4611      	mov	r1, r2
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	4798      	blx	r3
 8007268:	e001      	b.n	800726e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	e000      	b.n	8007270 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	2200      	movs	r2, #0
 8007284:	2100      	movs	r1, #0
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fa5b 	bl	8008742 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	; 0x40
 8007298:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800729c:	2340      	movs	r3, #64	; 0x40
 800729e:	2200      	movs	r2, #0
 80072a0:	2180      	movs	r1, #128	; 0x80
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fa4d 	bl	8008742 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2240      	movs	r2, #64	; 0x40
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d009      	beq.n	80072f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	4611      	mov	r1, r2
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
  }

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	460b      	mov	r3, r1
 8007304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr

08007318 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734e:	2b04      	cmp	r3, #4
 8007350:	d105      	bne.n	800735e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr

0800736a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	2b03      	cmp	r3, #3
 800737a:	d10b      	bne.n	8007394 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b6:	2b40      	cmp	r3, #64	; 0x40
 80073b8:	d005      	beq.n	80073c6 <USBD_StdDevReq+0x26>
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d84f      	bhi.n	800745e <USBD_StdDevReq+0xbe>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <USBD_StdDevReq+0x36>
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d14b      	bne.n	800745e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
      break;
 80073d4:	e048      	b.n	8007468 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d839      	bhi.n	8007452 <USBD_StdDevReq+0xb2>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <USBD_StdDevReq+0x44>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007435 	.word	0x08007435
 80073e8:	08007449 	.word	0x08007449
 80073ec:	08007453 	.word	0x08007453
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	08007453 	.word	0x08007453
 80073f8:	08007417 	.word	0x08007417
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	08007453 	.word	0x08007453
 8007404:	0800742b 	.word	0x0800742b
 8007408:	08007421 	.word	0x08007421
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f9dc 	bl	80077cc <USBD_GetDescriptor>
          break;
 8007414:	e022      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb3f 	bl	8007a9c <USBD_SetAddress>
          break;
 800741e:	e01d      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb7e 	bl	8007b24 <USBD_SetConfig>
          break;
 8007428:	e018      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc07 	bl	8007c40 <USBD_GetConfig>
          break;
 8007432:	e013      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fc37 	bl	8007caa <USBD_GetStatus>
          break;
 800743c:	e00e      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc65 	bl	8007d10 <USBD_SetFeature>
          break;
 8007446:	e009      	b.n	800745c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc74 	bl	8007d38 <USBD_ClrFeature>
          break;
 8007450:	e004      	b.n	800745c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fccc 	bl	8007df2 <USBD_CtlError>
          break;
 800745a:	bf00      	nop
      }
      break;
 800745c:	e004      	b.n	8007468 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fcc6 	bl	8007df2 <USBD_CtlError>
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop

08007474 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d005      	beq.n	800749a <USBD_StdItfReq+0x26>
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d82e      	bhi.n	80074f0 <USBD_StdItfReq+0x7c>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <USBD_StdItfReq+0x26>
 8007496:	2b20      	cmp	r3, #32
 8007498:	d12a      	bne.n	80074f0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	3b01      	subs	r3, #1
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d81d      	bhi.n	80074e2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	889b      	ldrh	r3, [r3, #4]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d813      	bhi.n	80074d8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88db      	ldrh	r3, [r3, #6]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d110      	bne.n	80074ec <USBD_StdItfReq+0x78>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10d      	bne.n	80074ec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fd56 	bl	8007f82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074d6:	e009      	b.n	80074ec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fc89 	bl	8007df2 <USBD_CtlError>
          break;
 80074e0:	e004      	b.n	80074ec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc84 	bl	8007df2 <USBD_CtlError>
          break;
 80074ea:	e000      	b.n	80074ee <USBD_StdItfReq+0x7a>
          break;
 80074ec:	bf00      	nop
      }
      break;
 80074ee:	e004      	b.n	80074fa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc7d 	bl	8007df2 <USBD_CtlError>
      break;
 80074f8:	bf00      	nop
  }

  return USBD_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	889b      	ldrh	r3, [r3, #4]
 8007516:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	d007      	beq.n	8007534 <USBD_StdEPReq+0x30>
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	f200 8146 	bhi.w	80077b6 <USBD_StdEPReq+0x2b2>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <USBD_StdEPReq+0x40>
 800752e:	2b20      	cmp	r3, #32
 8007530:	f040 8141 	bne.w	80077b6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      break;
 8007542:	e13d      	b.n	80077c0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800754c:	2b20      	cmp	r3, #32
 800754e:	d10a      	bne.n	8007566 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4798      	blx	r3
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	e12d      	b.n	80077c2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d007      	beq.n	800757e <USBD_StdEPReq+0x7a>
 800756e:	2b03      	cmp	r3, #3
 8007570:	f300 811b 	bgt.w	80077aa <USBD_StdEPReq+0x2a6>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d072      	beq.n	800765e <USBD_StdEPReq+0x15a>
 8007578:	2b01      	cmp	r3, #1
 800757a:	d03a      	beq.n	80075f2 <USBD_StdEPReq+0xee>
 800757c:	e115      	b.n	80077aa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x8a>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d015      	beq.n	80075b8 <USBD_StdEPReq+0xb4>
 800758c:	e02b      	b.n	80075e6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <USBD_StdEPReq+0xaa>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d009      	beq.n	80075ae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 f914 	bl	80087cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f910 	bl	80087cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075ac:	e020      	b.n	80075f0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fc1e 	bl	8007df2 <USBD_CtlError>
              break;
 80075b6:	e01b      	b.n	80075f0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	885b      	ldrh	r3, [r3, #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10e      	bne.n	80075de <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <USBD_StdEPReq+0xda>
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b80      	cmp	r3, #128	; 0x80
 80075ca:	d008      	beq.n	80075de <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	88db      	ldrh	r3, [r3, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d104      	bne.n	80075de <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f8f7 	bl	80087cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fccf 	bl	8007f82 <USBD_CtlSendStatus>

              break;
 80075e4:	e004      	b.n	80075f0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc02 	bl	8007df2 <USBD_CtlError>
              break;
 80075ee:	bf00      	nop
          }
          break;
 80075f0:	e0e0      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d002      	beq.n	8007602 <USBD_StdEPReq+0xfe>
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d015      	beq.n	800762c <USBD_StdEPReq+0x128>
 8007600:	e026      	b.n	8007650 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <USBD_StdEPReq+0x11e>
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d009      	beq.n	8007622 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f8da 	bl	80087cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 f8d6 	bl	80087cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007620:	e01c      	b.n	800765c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbe4 	bl	8007df2 <USBD_CtlError>
              break;
 800762a:	e017      	b.n	800765c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d112      	bne.n	800765a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 f8e1 	bl	800880a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc9a 	bl	8007f82 <USBD_CtlSendStatus>
              }
              break;
 800764e:	e004      	b.n	800765a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fbcd 	bl	8007df2 <USBD_CtlError>
              break;
 8007658:	e000      	b.n	800765c <USBD_StdEPReq+0x158>
              break;
 800765a:	bf00      	nop
          }
          break;
 800765c:	e0aa      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_StdEPReq+0x16a>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d032      	beq.n	80076d2 <USBD_StdEPReq+0x1ce>
 800766c:	e097      	b.n	800779e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <USBD_StdEPReq+0x180>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	; 0x80
 8007678:	d004      	beq.n	8007684 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fbb8 	bl	8007df2 <USBD_CtlError>
                break;
 8007682:	e091      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da0b      	bge.n	80076a4 <USBD_StdEPReq+0x1a0>
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	3310      	adds	r3, #16
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	3304      	adds	r3, #4
 80076a2:	e00b      	b.n	80076bc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	3304      	adds	r3, #4
 80076bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2202      	movs	r2, #2
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fbfb 	bl	8007ec6 <USBD_CtlSendData>
              break;
 80076d0:	e06a      	b.n	80077a8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80076d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da11      	bge.n	80076fe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	f003 020f 	and.w	r2, r3, #15
 80076e0:	6879      	ldr	r1, [r7, #4]
 80076e2:	4613      	mov	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	3318      	adds	r3, #24
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d117      	bne.n	8007724 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fb7b 	bl	8007df2 <USBD_CtlError>
                  break;
 80076fc:	e054      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	f003 020f 	and.w	r2, r3, #15
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fb68 	bl	8007df2 <USBD_CtlError>
                  break;
 8007722:	e041      	b.n	80077a8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da0b      	bge.n	8007744 <USBD_StdEPReq+0x240>
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	3310      	adds	r3, #16
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	e00b      	b.n	800775c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4413      	add	r3, r2
 800775a:	3304      	adds	r3, #4
 800775c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <USBD_StdEPReq+0x266>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d103      	bne.n	8007772 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	e00e      	b.n	8007790 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 f866 	bl	8008848 <USBD_LL_IsStallEP>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e002      	b.n	8007790 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2202      	movs	r2, #2
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fb95 	bl	8007ec6 <USBD_CtlSendData>
              break;
 800779c:	e004      	b.n	80077a8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fb26 	bl	8007df2 <USBD_CtlError>
              break;
 80077a6:	bf00      	nop
          }
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb20 	bl	8007df2 <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fb1a 	bl	8007df2 <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b06      	cmp	r3, #6
 80077ee:	f200 8128 	bhi.w	8007a42 <USBD_GetDescriptor+0x276>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <USBD_GetDescriptor+0x2c>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800782d 	.word	0x0800782d
 8007800:	0800786d 	.word	0x0800786d
 8007804:	08007a43 	.word	0x08007a43
 8007808:	08007a43 	.word	0x08007a43
 800780c:	080079e3 	.word	0x080079e3
 8007810:	08007a0f 	.word	0x08007a0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
      break;
 800782a:	e112      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7c1b      	ldrb	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10d      	bne.n	8007850 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f107 0208 	add.w	r2, r7, #8
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	2202      	movs	r2, #2
 800784c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800784e:	e100      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	f107 0208 	add.w	r2, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3301      	adds	r3, #1
 8007866:	2202      	movs	r2, #2
 8007868:	701a      	strb	r2, [r3, #0]
      break;
 800786a:	e0f2      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b05      	cmp	r3, #5
 8007874:	f200 80ac 	bhi.w	80079d0 <USBD_GetDescriptor+0x204>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <USBD_GetDescriptor+0xb4>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	08007899 	.word	0x08007899
 8007884:	080078cd 	.word	0x080078cd
 8007888:	08007901 	.word	0x08007901
 800788c:	08007935 	.word	0x08007935
 8007890:	08007969 	.word	0x08007969
 8007894:	0800799d 	.word	0x0800799d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	7c12      	ldrb	r2, [r2, #16]
 80078b0:	f107 0108 	add.w	r1, r7, #8
 80078b4:	4610      	mov	r0, r2
 80078b6:	4798      	blx	r3
 80078b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ba:	e091      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa97 	bl	8007df2 <USBD_CtlError>
            err++;
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	3301      	adds	r3, #1
 80078c8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ca:	e089      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	7c12      	ldrb	r2, [r2, #16]
 80078e4:	f107 0108 	add.w	r1, r7, #8
 80078e8:	4610      	mov	r0, r2
 80078ea:	4798      	blx	r3
 80078ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ee:	e077      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa7d 	bl	8007df2 <USBD_CtlError>
            err++;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3301      	adds	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]
          break;
 80078fe:	e06f      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00b      	beq.n	8007924 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	7c12      	ldrb	r2, [r2, #16]
 8007918:	f107 0108 	add.w	r1, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007922:	e05d      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa63 	bl	8007df2 <USBD_CtlError>
            err++;
 800792c:	7afb      	ldrb	r3, [r7, #11]
 800792e:	3301      	adds	r3, #1
 8007930:	72fb      	strb	r3, [r7, #11]
          break;
 8007932:	e055      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	7c12      	ldrb	r2, [r2, #16]
 800794c:	f107 0108 	add.w	r1, r7, #8
 8007950:	4610      	mov	r0, r2
 8007952:	4798      	blx	r3
 8007954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007956:	e043      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa49 	bl	8007df2 <USBD_CtlError>
            err++;
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	3301      	adds	r3, #1
 8007964:	72fb      	strb	r3, [r7, #11]
          break;
 8007966:	e03b      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7c12      	ldrb	r2, [r2, #16]
 8007980:	f107 0108 	add.w	r1, r7, #8
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
 8007988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800798a:	e029      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa2f 	bl	8007df2 <USBD_CtlError>
            err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
          break;
 800799a:	e021      	b.n	80079e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079be:	e00f      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa15 	bl	8007df2 <USBD_CtlError>
            err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
          break;
 80079ce:	e007      	b.n	80079e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa0d 	bl	8007df2 <USBD_CtlError>
          err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80079de:	e038      	b.n	8007a52 <USBD_GetDescriptor+0x286>
 80079e0:	e037      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7c1b      	ldrb	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	f107 0208 	add.w	r2, r7, #8
 80079f6:	4610      	mov	r0, r2
 80079f8:	4798      	blx	r3
 80079fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079fc:	e029      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9f6 	bl	8007df2 <USBD_CtlError>
        err++;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0c:	e021      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	7c1b      	ldrb	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10d      	bne.n	8007a32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	f107 0208 	add.w	r2, r7, #8
 8007a22:	4610      	mov	r0, r2
 8007a24:	4798      	blx	r3
 8007a26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a30:	e00f      	b.n	8007a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9dc 	bl	8007df2 <USBD_CtlError>
        err++;
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a40:	e007      	b.n	8007a52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9d4 	bl	8007df2 <USBD_CtlError>
      err++;
 8007a4a:	7afb      	ldrb	r3, [r7, #11]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a50:	bf00      	nop
  }

  if (err != 0U)
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11c      	bne.n	8007a92 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a58:	893b      	ldrh	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d011      	beq.n	8007a82 <USBD_GetDescriptor+0x2b6>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	88db      	ldrh	r3, [r3, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	88da      	ldrh	r2, [r3, #6]
 8007a6a:	893b      	ldrh	r3, [r7, #8]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	bf28      	it	cs
 8007a70:	4613      	movcs	r3, r2
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a76:	893b      	ldrh	r3, [r7, #8]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	68f9      	ldr	r1, [r7, #12]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa22 	bl	8007ec6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa79 	bl	8007f82 <USBD_CtlSendStatus>
 8007a90:	e000      	b.n	8007a94 <USBD_GetDescriptor+0x2c8>
    return;
 8007a92:	bf00      	nop
    }
  }
}
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	889b      	ldrh	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d130      	bne.n	8007b10 <USBD_SetAddress+0x74>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	88db      	ldrh	r3, [r3, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d12c      	bne.n	8007b10 <USBD_SetAddress+0x74>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	885b      	ldrh	r3, [r3, #2]
 8007aba:	2b7f      	cmp	r3, #127	; 0x7f
 8007abc:	d828      	bhi.n	8007b10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d104      	bne.n	8007ade <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f98b 	bl	8007df2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007adc:	e01d      	b.n	8007b1a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7bfa      	ldrb	r2, [r7, #15]
 8007ae2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fed8 	bl	80088a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa46 	bl	8007f82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b04:	e009      	b.n	8007b1a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	e004      	b.n	8007b1a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f96d 	bl	8007df2 <USBD_CtlError>
  }
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	4b41      	ldr	r3, [pc, #260]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b38:	4b40      	ldr	r3, [pc, #256]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d904      	bls.n	8007b4a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f955 	bl	8007df2 <USBD_CtlError>
 8007b48:	e075      	b.n	8007c36 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d002      	beq.n	8007b5a <USBD_SetConfig+0x36>
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d023      	beq.n	8007ba0 <USBD_SetConfig+0x7c>
 8007b58:	e062      	b.n	8007c20 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b5a:	4b38      	ldr	r3, [pc, #224]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d01a      	beq.n	8007b98 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b62:	4b36      	ldr	r3, [pc, #216]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2203      	movs	r2, #3
 8007b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b74:	4b31      	ldr	r3, [pc, #196]	; (8007c3c <USBD_SetConfig+0x118>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff f9e7 	bl	8006f4e <USBD_SetClassConfig>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d104      	bne.n	8007b90 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f932 	bl	8007df2 <USBD_CtlError>
            return;
 8007b8e:	e052      	b.n	8007c36 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9f6 	bl	8007f82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b96:	e04e      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f9f2 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007b9e:	e04a      	b.n	8007c36 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ba0:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <USBD_SetConfig+0x118>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d112      	bne.n	8007bce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007bb0:	4b22      	ldr	r3, [pc, #136]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007bba:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff f9e3 	bl	8006f8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9db 	bl	8007f82 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bcc:	e033      	b.n	8007c36 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007bce:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d01d      	beq.n	8007c18 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff f9d1 	bl	8006f8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007bea:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <USBD_SetConfig+0x118>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff f9a7 	bl	8006f4e <USBD_SetClassConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d104      	bne.n	8007c10 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f8f2 	bl	8007df2 <USBD_CtlError>
            return;
 8007c0e:	e012      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9b6 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007c16:	e00e      	b.n	8007c36 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9b2 	bl	8007f82 <USBD_CtlSendStatus>
        break;
 8007c1e:	e00a      	b.n	8007c36 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8e5 	bl	8007df2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <USBD_SetConfig+0x118>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f9ac 	bl	8006f8c <USBD_ClrClassConfig>
        break;
 8007c34:	bf00      	nop
    }
  }
}
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200001b4 	.word	0x200001b4

08007c40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d004      	beq.n	8007c5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8cc 	bl	8007df2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c5a:	e022      	b.n	8007ca2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	dc02      	bgt.n	8007c6c <USBD_GetConfig+0x2c>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dc03      	bgt.n	8007c72 <USBD_GetConfig+0x32>
 8007c6a:	e015      	b.n	8007c98 <USBD_GetConfig+0x58>
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetConfig+0x48>
 8007c70:	e012      	b.n	8007c98 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f920 	bl	8007ec6 <USBD_CtlSendData>
        break;
 8007c86:	e00c      	b.n	8007ca2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f918 	bl	8007ec6 <USBD_CtlSendData>
        break;
 8007c96:	e004      	b.n	8007ca2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8a9 	bl	8007df2 <USBD_CtlError>
        break;
 8007ca0:	bf00      	nop
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d81e      	bhi.n	8007cfe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	88db      	ldrh	r3, [r3, #6]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d004      	beq.n	8007cd2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f891 	bl	8007df2 <USBD_CtlError>
        break;
 8007cd0:	e01a      	b.n	8007d08 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f043 0202 	orr.w	r2, r3, #2
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f8e5 	bl	8007ec6 <USBD_CtlSendData>
      break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f876 	bl	8007df2 <USBD_CtlError>
      break;
 8007d06:	bf00      	nop
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	885b      	ldrh	r3, [r3, #2]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d106      	bne.n	8007d30 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f929 	bl	8007f82 <USBD_CtlSendStatus>
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d80b      	bhi.n	8007d66 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	885b      	ldrh	r3, [r3, #2]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10c      	bne.n	8007d70 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f90f 	bl	8007f82 <USBD_CtlSendStatus>
      }
      break;
 8007d64:	e004      	b.n	8007d70 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f842 	bl	8007df2 <USBD_CtlError>
      break;
 8007d6e:	e000      	b.n	8007d72 <USBD_ClrFeature+0x3a>
      break;
 8007d70:	bf00      	nop
  }
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781a      	ldrb	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	785a      	ldrb	r2, [r3, #1]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3302      	adds	r3, #2
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	3303      	adds	r3, #3
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4413      	add	r3, r2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3304      	adds	r3, #4
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	3305      	adds	r3, #5
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	3306      	adds	r3, #6
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3307      	adds	r3, #7
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	80da      	strh	r2, [r3, #6]

}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fce4 	bl	80087cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fce0 	bl	80087cc <USBD_LL_StallEP>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d032      	beq.n	8007e90 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f834 	bl	8007e98 <USBD_GetLen>
 8007e30:	4603      	mov	r3, r0
 8007e32:	3301      	adds	r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	75fa      	strb	r2, [r7, #23]
 8007e44:	461a      	mov	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4413      	add	r3, r2
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	75fa      	strb	r2, [r7, #23]
 8007e56:	461a      	mov	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e60:	e012      	b.n	8007e88 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	7dfa      	ldrb	r2, [r7, #23]
 8007e6a:	1c51      	adds	r1, r2, #1
 8007e6c:	75f9      	strb	r1, [r7, #23]
 8007e6e:	4611      	mov	r1, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	440a      	add	r2, r1
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	75fa      	strb	r2, [r7, #23]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4413      	add	r3, r2
 8007e84:	2200      	movs	r2, #0
 8007e86:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e8      	bne.n	8007e62 <USBD_GetString+0x4e>
    }
  }
}
 8007e90:	bf00      	nop
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ea4:	e005      	b.n	8007eb2 <USBD_GetLen+0x1a>
  {
    len++;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f5      	bne.n	8007ea6 <USBD_GetLen+0xe>
  }

  return len;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fcf5 	bl	80088de <USBD_LL_Transmit>

  return USBD_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f000 fce3 	bl	80088de <USBD_LL_Transmit>

  return USBD_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2203      	movs	r2, #3
 8007f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fce8 	bl	8008924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	2100      	movs	r1, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fcd6 	bl	8008924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f92:	2300      	movs	r3, #0
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fca0 	bl	80088de <USBD_LL_Transmit>

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2205      	movs	r2, #5
 8007fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fcb0 	bl	8008924 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4912      	ldr	r1, [pc, #72]	; (8008020 <MX_USB_DEVICE_Init+0x50>)
 8007fd8:	4812      	ldr	r0, [pc, #72]	; (8008024 <MX_USB_DEVICE_Init+0x54>)
 8007fda:	f7fe ff41 	bl	8006e60 <USBD_Init>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fe4:	f7f8 fb02 	bl	80005ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fe8:	490f      	ldr	r1, [pc, #60]	; (8008028 <MX_USB_DEVICE_Init+0x58>)
 8007fea:	480e      	ldr	r0, [pc, #56]	; (8008024 <MX_USB_DEVICE_Init+0x54>)
 8007fec:	f7fe ff80 	bl	8006ef0 <USBD_RegisterClass>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ff6:	f7f8 faf9 	bl	80005ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ffa:	490c      	ldr	r1, [pc, #48]	; (800802c <MX_USB_DEVICE_Init+0x5c>)
 8007ffc:	4809      	ldr	r0, [pc, #36]	; (8008024 <MX_USB_DEVICE_Init+0x54>)
 8007ffe:	f7fe fec3 	bl	8006d88 <USBD_CDC_RegisterInterface>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008008:	f7f8 faf0 	bl	80005ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800800c:	4805      	ldr	r0, [pc, #20]	; (8008024 <MX_USB_DEVICE_Init+0x54>)
 800800e:	f7fe ff88 	bl	8006f22 <USBD_Start>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008018:	f7f8 fae8 	bl	80005ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800801c:	bf00      	nop
 800801e:	bd80      	pop	{r7, pc}
 8008020:	2000012c 	.word	0x2000012c
 8008024:	20002ba0 	.word	0x20002ba0
 8008028:	20000018 	.word	0x20000018
 800802c:	2000011c 	.word	0x2000011c

08008030 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008034:	2200      	movs	r2, #0
 8008036:	4905      	ldr	r1, [pc, #20]	; (800804c <CDC_Init_FS+0x1c>)
 8008038:	4805      	ldr	r0, [pc, #20]	; (8008050 <CDC_Init_FS+0x20>)
 800803a:	f7fe febb 	bl	8006db4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800803e:	4905      	ldr	r1, [pc, #20]	; (8008054 <CDC_Init_FS+0x24>)
 8008040:	4803      	ldr	r0, [pc, #12]	; (8008050 <CDC_Init_FS+0x20>)
 8008042:	f7fe fed0 	bl	8006de6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008046:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008048:	4618      	mov	r0, r3
 800804a:	bd80      	pop	{r7, pc}
 800804c:	2000324c 	.word	0x2000324c
 8008050:	20002ba0 	.word	0x20002ba0
 8008054:	20002e64 	.word	0x20002e64

08008058 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800805c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800805e:	4618      	mov	r0, r3
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr
	...

08008068 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
 8008074:	4613      	mov	r3, r2
 8008076:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b23      	cmp	r3, #35	; 0x23
 800807c:	d84a      	bhi.n	8008114 <CDC_Control_FS+0xac>
 800807e:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <CDC_Control_FS+0x1c>)
 8008080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008084:	08008115 	.word	0x08008115
 8008088:	08008115 	.word	0x08008115
 800808c:	08008115 	.word	0x08008115
 8008090:	08008115 	.word	0x08008115
 8008094:	08008115 	.word	0x08008115
 8008098:	08008115 	.word	0x08008115
 800809c:	08008115 	.word	0x08008115
 80080a0:	08008115 	.word	0x08008115
 80080a4:	08008115 	.word	0x08008115
 80080a8:	08008115 	.word	0x08008115
 80080ac:	08008115 	.word	0x08008115
 80080b0:	08008115 	.word	0x08008115
 80080b4:	08008115 	.word	0x08008115
 80080b8:	08008115 	.word	0x08008115
 80080bc:	08008115 	.word	0x08008115
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008115 	.word	0x08008115
 80080c8:	08008115 	.word	0x08008115
 80080cc:	08008115 	.word	0x08008115
 80080d0:	08008115 	.word	0x08008115
 80080d4:	08008115 	.word	0x08008115
 80080d8:	08008115 	.word	0x08008115
 80080dc:	08008115 	.word	0x08008115
 80080e0:	08008115 	.word	0x08008115
 80080e4:	08008115 	.word	0x08008115
 80080e8:	08008115 	.word	0x08008115
 80080ec:	08008115 	.word	0x08008115
 80080f0:	08008115 	.word	0x08008115
 80080f4:	08008115 	.word	0x08008115
 80080f8:	08008115 	.word	0x08008115
 80080fc:	08008115 	.word	0x08008115
 8008100:	08008115 	.word	0x08008115
 8008104:	08008115 	.word	0x08008115
 8008108:	08008115 	.word	0x08008115
 800810c:	08008115 	.word	0x08008115
 8008110:	08008115 	.word	0x08008115
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008114:	bf00      	nop
  }

  return (USBD_OK);
 8008116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4835      	ldr	r0, [pc, #212]	; (8008208 <CDC_Receive_FS+0xe4>)
 8008132:	f7fe fe58 	bl	8006de6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008136:	4834      	ldr	r0, [pc, #208]	; (8008208 <CDC_Receive_FS+0xe4>)
 8008138:	f7fe fe68 	bl	8006e0c <USBD_CDC_ReceivePacket>
  for(int i=0;i<(*Len/4);i++)
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e057      	b.n	80081f2 <CDC_Receive_FS+0xce>
  {
	  aRxnumbuf[aRxnum]=Buf[(i*4)+3];
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	3303      	adds	r3, #3
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	781a      	ldrb	r2, [r3, #0]
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <CDC_Receive_FS+0xe8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4611      	mov	r1, r2
 8008154:	4a2e      	ldr	r2, [pc, #184]	; (8008210 <CDC_Receive_FS+0xec>)
 8008156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+Buf[(i*4)+2];
 800815a:	4b2c      	ldr	r3, [pc, #176]	; (800820c <CDC_Receive_FS+0xe8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a2c      	ldr	r2, [pc, #176]	; (8008210 <CDC_Receive_FS+0xec>)
 8008160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008164:	021a      	lsls	r2, r3, #8
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	3302      	adds	r3, #2
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	440b      	add	r3, r1
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	4b25      	ldr	r3, [pc, #148]	; (800820c <CDC_Receive_FS+0xe8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	440a      	add	r2, r1
 800817a:	4925      	ldr	r1, [pc, #148]	; (8008210 <CDC_Receive_FS+0xec>)
 800817c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+Buf[(i*4)+1];
 8008180:	4b22      	ldr	r3, [pc, #136]	; (800820c <CDC_Receive_FS+0xe8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a22      	ldr	r2, [pc, #136]	; (8008210 <CDC_Receive_FS+0xec>)
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	021a      	lsls	r2, r3, #8
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	3301      	adds	r3, #1
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	440b      	add	r3, r1
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4619      	mov	r1, r3
 800819a:	4b1c      	ldr	r3, [pc, #112]	; (800820c <CDC_Receive_FS+0xe8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	440a      	add	r2, r1
 80081a0:	491b      	ldr	r1, [pc, #108]	; (8008210 <CDC_Receive_FS+0xec>)
 80081a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  aRxnumbuf[aRxnum]=(aRxnumbuf[aRxnum]<<8)+Buf[(i*4)+0];
 80081a6:	4b19      	ldr	r3, [pc, #100]	; (800820c <CDC_Receive_FS+0xe8>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a19      	ldr	r2, [pc, #100]	; (8008210 <CDC_Receive_FS+0xec>)
 80081ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b0:	021a      	lsls	r2, r3, #8
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4619      	mov	r1, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	440b      	add	r3, r1
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	4619      	mov	r1, r3
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <CDC_Receive_FS+0xe8>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	440a      	add	r2, r1
 80081c6:	4912      	ldr	r1, [pc, #72]	; (8008210 <CDC_Receive_FS+0xec>)
 80081c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  aRxnum++;
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <CDC_Receive_FS+0xe8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	4a0e      	ldr	r2, [pc, #56]	; (800820c <CDC_Receive_FS+0xe8>)
 80081d4:	6013      	str	r3, [r2, #0]
	    if(Buf[(i*4)]==0x7E){
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b7e      	cmp	r3, #126	; 0x7e
 80081e4:	d102      	bne.n	80081ec <CDC_Receive_FS+0xc8>
	      rDataFlag = 1;
 80081e6:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <CDC_Receive_FS+0xf0>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<(*Len/4);i++)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	089a      	lsrs	r2, r3, #2
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d8a1      	bhi.n	8008142 <CDC_Receive_FS+0x1e>
	    }
  }
//  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &rDataFlag,1);
//  USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  return (USBD_OK);
 80081fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20002ba0 	.word	0x20002ba0
 800820c:	2000019c 	.word	0x2000019c
 8008210:	20000c38 	.word	0x20000c38
 8008214:	200001a0 	.word	0x200001a0

08008218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2212      	movs	r2, #18
 8008228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800822a:	4b03      	ldr	r3, [pc, #12]	; (8008238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20000148 	.word	0x20000148

0800823c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2204      	movs	r2, #4
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	2000015c 	.word	0x2000015c

08008260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	4907      	ldr	r1, [pc, #28]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
 8008276:	4808      	ldr	r0, [pc, #32]	; (8008298 <USBD_FS_ProductStrDescriptor+0x38>)
 8008278:	f7ff fdcc 	bl	8007e14 <USBD_GetString>
 800827c:	e004      	b.n	8008288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4904      	ldr	r1, [pc, #16]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
 8008282:	4805      	ldr	r0, [pc, #20]	; (8008298 <USBD_FS_ProductStrDescriptor+0x38>)
 8008284:	f7ff fdc6 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008288:	4b02      	ldr	r3, [pc, #8]	; (8008294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20003634 	.word	0x20003634
 8008298:	08008ab8 	.word	0x08008ab8

0800829c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	4904      	ldr	r1, [pc, #16]	; (80082bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082ac:	4804      	ldr	r0, [pc, #16]	; (80082c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082ae:	f7ff fdb1 	bl	8007e14 <USBD_GetString>
  return USBD_StrDesc;
 80082b2:	4b02      	ldr	r3, [pc, #8]	; (80082bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20003634 	.word	0x20003634
 80082c0:	08008ad0 	.word	0x08008ad0

080082c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	221a      	movs	r2, #26
 80082d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082d6:	f000 f843 	bl	8008360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082da:	4b02      	ldr	r3, [pc, #8]	; (80082e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000160 	.word	0x20000160

080082e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	; (8008320 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008300:	f7ff fd88 	bl	8007e14 <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800830c:	f7ff fd82 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20003634 	.word	0x20003634
 8008320:	08008ae4 	.word	0x08008ae4

08008324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d105      	bne.n	8008342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	4907      	ldr	r1, [pc, #28]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800833a:	4808      	ldr	r0, [pc, #32]	; (800835c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800833c:	f7ff fd6a 	bl	8007e14 <USBD_GetString>
 8008340:	e004      	b.n	800834c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	4904      	ldr	r1, [pc, #16]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008346:	4805      	ldr	r0, [pc, #20]	; (800835c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008348:	f7ff fd64 	bl	8007e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20003634 	.word	0x20003634
 800835c:	08008af0 	.word	0x08008af0

08008360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <Get_SerialNum+0x44>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800836c:	4b0e      	ldr	r3, [pc, #56]	; (80083a8 <Get_SerialNum+0x48>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008372:	4b0e      	ldr	r3, [pc, #56]	; (80083ac <Get_SerialNum+0x4c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008386:	2208      	movs	r2, #8
 8008388:	4909      	ldr	r1, [pc, #36]	; (80083b0 <Get_SerialNum+0x50>)
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f814 	bl	80083b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008390:	2204      	movs	r2, #4
 8008392:	4908      	ldr	r1, [pc, #32]	; (80083b4 <Get_SerialNum+0x54>)
 8008394:	68b8      	ldr	r0, [r7, #8]
 8008396:	f000 f80f 	bl	80083b8 <IntToUnicode>
  }
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	1ffff7e8 	.word	0x1ffff7e8
 80083a8:	1ffff7ec 	.word	0x1ffff7ec
 80083ac:	1ffff7f0 	.word	0x1ffff7f0
 80083b0:	20000162 	.word	0x20000162
 80083b4:	20000172 	.word	0x20000172

080083b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083ca:	2300      	movs	r3, #0
 80083cc:	75fb      	strb	r3, [r7, #23]
 80083ce:	e027      	b.n	8008420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0f1b      	lsrs	r3, r3, #28
 80083d4:	2b09      	cmp	r3, #9
 80083d6:	d80b      	bhi.n	80083f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	0f1b      	lsrs	r3, r3, #28
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	4619      	mov	r1, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	440b      	add	r3, r1
 80083e8:	3230      	adds	r2, #48	; 0x30
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e00a      	b.n	8008406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	0f1b      	lsrs	r3, r3, #28
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4619      	mov	r1, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	440b      	add	r3, r1
 8008400:	3237      	adds	r2, #55	; 0x37
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	3301      	adds	r3, #1
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	4413      	add	r3, r2
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	3301      	adds	r3, #1
 800841e:	75fb      	strb	r3, [r7, #23]
 8008420:	7dfa      	ldrb	r2, [r7, #23]
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	429a      	cmp	r2, r3
 8008426:	d3d3      	bcc.n	80083d0 <IntToUnicode+0x18>
  }
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a0d      	ldr	r2, [pc, #52]	; (8008478 <HAL_PCD_MspInit+0x44>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d113      	bne.n	800846e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <HAL_PCD_MspInit+0x48>)
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4a0c      	ldr	r2, [pc, #48]	; (800847c <HAL_PCD_MspInit+0x48>)
 800844c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008450:	61d3      	str	r3, [r2, #28]
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <HAL_PCD_MspInit+0x48>)
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800845e:	2200      	movs	r2, #0
 8008460:	2100      	movs	r1, #0
 8008462:	2014      	movs	r0, #20
 8008464:	f7f8 fb41 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008468:	2014      	movs	r0, #20
 800846a:	f7f8 fb5a 	bl	8000b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800846e:	bf00      	nop
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40005c00 	.word	0x40005c00
 800847c:	40021000 	.word	0x40021000

08008480 <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a07      	ldr	r2, [pc, #28]	; (80084ac <HAL_PCD_MspDeInit+0x2c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d108      	bne.n	80084a4 <HAL_PCD_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <HAL_PCD_MspDeInit+0x30>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	4a06      	ldr	r2, [pc, #24]	; (80084b0 <HAL_PCD_MspDeInit+0x30>)
 8008498:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800849c:	61d3      	str	r3, [r2, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 800849e:	2014      	movs	r0, #20
 80084a0:	f7f8 fb4d 	bl	8000b3e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40005c00 	.word	0x40005c00
 80084b0:	40021000 	.word	0x40021000

080084b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f7fe fd71 	bl	8006fb2 <USBD_LL_SetupStage>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80084ea:	78fa      	ldrb	r2, [r7, #3]
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	440b      	add	r3, r1
 80084f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	4619      	mov	r1, r3
 8008502:	f7fe fda3 	bl	800704c <USBD_LL_DataOutStage>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008520:	78fa      	ldrb	r2, [r7, #3]
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	00db      	lsls	r3, r3, #3
 800852c:	440b      	add	r3, r1
 800852e:	333c      	adds	r3, #60	; 0x3c
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	4619      	mov	r1, r3
 8008536:	f7fe fdfa 	bl	800712e <USBD_LL_DataInStage>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe ff0a 	bl	800736a <USBD_LL_SOF>
}
 8008556:	bf00      	nop
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d001      	beq.n	8008576 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008572:	f7f8 f83b 	bl	80005ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800857c:	7bfa      	ldrb	r2, [r7, #15]
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe feba 	bl	80072fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fe73 	bl	8007278 <USBD_LL_Reset>
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe feb4 	bl	8007318 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <HAL_PCD_SuspendCallback+0x30>)
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	4a03      	ldr	r2, [pc, #12]	; (80085cc <HAL_PCD_SuspendCallback+0x30>)
 80085be:	f043 0306 	orr.w	r3, r3, #6
 80085c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085c4:	bf00      	nop
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	e000ed00 	.word	0xe000ed00

080085d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe feae 	bl	8007340 <USBD_LL_Resume>
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085f4:	4a28      	ldr	r2, [pc, #160]	; (8008698 <USBD_LL_Init+0xac>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a26      	ldr	r2, [pc, #152]	; (8008698 <USBD_LL_Init+0xac>)
 8008600:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008604:	4b24      	ldr	r3, [pc, #144]	; (8008698 <USBD_LL_Init+0xac>)
 8008606:	4a25      	ldr	r2, [pc, #148]	; (800869c <USBD_LL_Init+0xb0>)
 8008608:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800860a:	4b23      	ldr	r3, [pc, #140]	; (8008698 <USBD_LL_Init+0xac>)
 800860c:	2208      	movs	r2, #8
 800860e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008610:	4b21      	ldr	r3, [pc, #132]	; (8008698 <USBD_LL_Init+0xac>)
 8008612:	2202      	movs	r2, #2
 8008614:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <USBD_LL_Init+0xac>)
 8008618:	2200      	movs	r2, #0
 800861a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800861c:	4b1e      	ldr	r3, [pc, #120]	; (8008698 <USBD_LL_Init+0xac>)
 800861e:	2200      	movs	r2, #0
 8008620:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <USBD_LL_Init+0xac>)
 8008624:	2200      	movs	r2, #0
 8008626:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008628:	481b      	ldr	r0, [pc, #108]	; (8008698 <USBD_LL_Init+0xac>)
 800862a:	f7f8 feef 	bl	800140c <HAL_PCD_Init>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008634:	f7f7 ffda 	bl	80005ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800863e:	2318      	movs	r3, #24
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	f7fa fbae 	bl	8002da4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800864e:	2358      	movs	r3, #88	; 0x58
 8008650:	2200      	movs	r2, #0
 8008652:	2180      	movs	r1, #128	; 0x80
 8008654:	f7fa fba6 	bl	8002da4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800865e:	23c0      	movs	r3, #192	; 0xc0
 8008660:	2200      	movs	r2, #0
 8008662:	2181      	movs	r1, #129	; 0x81
 8008664:	f7fa fb9e 	bl	8002da4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800866e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008672:	2200      	movs	r2, #0
 8008674:	2101      	movs	r1, #1
 8008676:	f7fa fb95 	bl	8002da4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008684:	2200      	movs	r2, #0
 8008686:	2182      	movs	r1, #130	; 0x82
 8008688:	f7fa fb8c 	bl	8002da4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20003834 	.word	0x20003834
 800869c:	40005c00 	.word	0x40005c00

080086a0 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f8 ffb3 	bl	8001622 <HAL_PCD_DeInit>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f984 	bl	80089d0 <USBD_Get_USB_Status>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7f8 ffbb 	bl	8001668 <HAL_PCD_Start>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f969 	bl	80089d0 <USBD_Get_USB_Status>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008702:	7bbb      	ldrb	r3, [r7, #14]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008722:	4618      	mov	r0, r3
 8008724:	f7f8 ffc6 	bl	80016b4 <HAL_PCD_Stop>
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f94e 	bl	80089d0 <USBD_Get_USB_Status>
 8008734:	4603      	mov	r3, r0
 8008736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008738:	7bbb      	ldrb	r3, [r7, #14]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	4608      	mov	r0, r1
 800874c:	4611      	mov	r1, r2
 800874e:	461a      	mov	r2, r3
 8008750:	4603      	mov	r3, r0
 8008752:	70fb      	strb	r3, [r7, #3]
 8008754:	460b      	mov	r3, r1
 8008756:	70bb      	strb	r3, [r7, #2]
 8008758:	4613      	mov	r3, r2
 800875a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800876a:	78bb      	ldrb	r3, [r7, #2]
 800876c:	883a      	ldrh	r2, [r7, #0]
 800876e:	78f9      	ldrb	r1, [r7, #3]
 8008770:	f7f9 f940 	bl	80019f4 <HAL_PCD_EP_Open>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f928 	bl	80089d0 <USBD_Get_USB_Status>
 8008780:	4603      	mov	r3, r0
 8008782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008784:	7bbb      	ldrb	r3, [r7, #14]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087a8:	78fa      	ldrb	r2, [r7, #3]
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7f9 f987 	bl	8001ac0 <HAL_PCD_EP_Close>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f909 	bl	80089d0 <USBD_Get_USB_Status>
 80087be:	4603      	mov	r3, r0
 80087c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 fa47 	bl	8001c7e <HAL_PCD_EP_SetStall>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f8ea 	bl	80089d0 <USBD_Get_USB_Status>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f7f9 fa88 	bl	8001d3e <HAL_PCD_EP_ClrStall>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f8cb 	bl	80089d0 <USBD_Get_USB_Status>
 800883a:	4603      	mov	r3, r0
 800883c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800883e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800885a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800885c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008860:	2b00      	cmp	r3, #0
 8008862:	da0c      	bge.n	800887e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	440b      	add	r3, r1
 8008878:	3302      	adds	r3, #2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	e00b      	b.n	8008896 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008884:	68f9      	ldr	r1, [r7, #12]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008894:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr

080088a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f9 f873 	bl	80019aa <HAL_PCD_SetAddress>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 f880 	bl	80089d0 <USBD_Get_USB_Status>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	461a      	mov	r2, r3
 80088ea:	460b      	mov	r3, r1
 80088ec:	72fb      	strb	r3, [r7, #11]
 80088ee:	4613      	mov	r3, r2
 80088f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008900:	893b      	ldrh	r3, [r7, #8]
 8008902:	7af9      	ldrb	r1, [r7, #11]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	f7f9 f977 	bl	8001bf8 <HAL_PCD_EP_Transmit>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f85d 	bl	80089d0 <USBD_Get_USB_Status>
 8008916:	4603      	mov	r3, r0
 8008918:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800891a:	7dbb      	ldrb	r3, [r7, #22]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	607a      	str	r2, [r7, #4]
 800892e:	461a      	mov	r2, r3
 8008930:	460b      	mov	r3, r1
 8008932:	72fb      	strb	r3, [r7, #11]
 8008934:	4613      	mov	r3, r2
 8008936:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008946:	893b      	ldrh	r3, [r7, #8]
 8008948:	7af9      	ldrb	r1, [r7, #11]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	f7f9 f900 	bl	8001b50 <HAL_PCD_EP_Receive>
 8008950:	4603      	mov	r3, r0
 8008952:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f83a 	bl	80089d0 <USBD_Get_USB_Status>
 800895c:	4603      	mov	r3, r0
 800895e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008960:	7dbb      	ldrb	r3, [r7, #22]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	4618      	mov	r0, r3
 8008982:	f7f9 f922 	bl	8001bca <HAL_PCD_EP_GetRxCount>
 8008986:	4603      	mov	r3, r0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008998:	4b02      	ldr	r3, [pc, #8]	; (80089a4 <USBD_static_malloc+0x14>)
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr
 80089a4:	200001b8 	.word	0x200001b8

080089a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d817      	bhi.n	8008a14 <USBD_Get_USB_Status+0x44>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_Get_USB_Status+0x1c>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	08008a03 	.word	0x08008a03
 80089f4:	08008a09 	.word	0x08008a09
 80089f8:	08008a0f 	.word	0x08008a0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	e00b      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	e008      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0c:	e005      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	73fb      	strb	r3, [r7, #15]
    break;
 8008a12:	e002      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a14:	2302      	movs	r3, #2
 8008a16:	73fb      	strb	r3, [r7, #15]
    break;
 8008a18:	bf00      	nop
  }
  return usb_status;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	4d0c      	ldr	r5, [pc, #48]	; (8008a60 <__libc_init_array+0x38>)
 8008a2e:	4c0d      	ldr	r4, [pc, #52]	; (8008a64 <__libc_init_array+0x3c>)
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	f000 f822 	bl	8008a80 <_init>
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	4d0a      	ldr	r5, [pc, #40]	; (8008a68 <__libc_init_array+0x40>)
 8008a40:	4c0a      	ldr	r4, [pc, #40]	; (8008a6c <__libc_init_array+0x44>)
 8008a42:	1b64      	subs	r4, r4, r5
 8008a44:	10a4      	asrs	r4, r4, #2
 8008a46:	42a6      	cmp	r6, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a50:	4798      	blx	r3
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5a:	4798      	blx	r3
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	08008b18 	.word	0x08008b18
 8008a64:	08008b18 	.word	0x08008b18
 8008a68:	08008b18 	.word	0x08008b18
 8008a6c:	08008b1c 	.word	0x08008b1c

08008a70 <memset>:
 8008a70:	4603      	mov	r3, r0
 8008a72:	4402      	add	r2, r0
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
